{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ISYS812 Project\n",
    "### Dataset : Global Terrorism Dataset\n",
    "\n",
    "#### Team Members :\n",
    "###    Mukul Pathak\n",
    "###    Shraddha Upadhyay\n",
    "###    Mansa \n",
    "###    Disha Shah"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import packages\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import dataset\n",
    "\n",
    "df = pd.read_csv('globalterrorismdb.csv', engine='python', encoding = \"ISO-8859-1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>iyear</th>\n",
       "      <th>imonth</th>\n",
       "      <th>iday</th>\n",
       "      <th>approxdate</th>\n",
       "      <th>extended</th>\n",
       "      <th>resolution</th>\n",
       "      <th>country</th>\n",
       "      <th>country_txt</th>\n",
       "      <th>region</th>\n",
       "      <th>...</th>\n",
       "      <th>addnotes</th>\n",
       "      <th>scite1</th>\n",
       "      <th>scite2</th>\n",
       "      <th>scite3</th>\n",
       "      <th>dbsource</th>\n",
       "      <th>INT_LOG</th>\n",
       "      <th>INT_IDEO</th>\n",
       "      <th>INT_MISC</th>\n",
       "      <th>INT_ANY</th>\n",
       "      <th>related</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>197000000001</td>\n",
       "      <td>1970</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>58</td>\n",
       "      <td>Dominican Republic</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PGIS</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197000000002</td>\n",
       "      <td>1970</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>130</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PGIS</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>197001000001</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>160</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PGIS</td>\n",
       "      <td>-9</td>\n",
       "      <td>-9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>197001000002</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>78</td>\n",
       "      <td>Greece</td>\n",
       "      <td>8</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PGIS</td>\n",
       "      <td>-9</td>\n",
       "      <td>-9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>197001000003</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>101</td>\n",
       "      <td>Japan</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PGIS</td>\n",
       "      <td>-9</td>\n",
       "      <td>-9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 135 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        eventid  iyear  imonth  iday approxdate  extended resolution  country  \\\n",
       "0  197000000001   1970       7     2        NaN         0        NaN       58   \n",
       "1  197000000002   1970       0     0        NaN         0        NaN      130   \n",
       "2  197001000001   1970       1     0        NaN         0        NaN      160   \n",
       "3  197001000002   1970       1     0        NaN         0        NaN       78   \n",
       "4  197001000003   1970       1     0        NaN         0        NaN      101   \n",
       "\n",
       "          country_txt  region  ... addnotes scite1 scite2  scite3  dbsource  \\\n",
       "0  Dominican Republic       2  ...      NaN    NaN    NaN     NaN      PGIS   \n",
       "1              Mexico       1  ...      NaN    NaN    NaN     NaN      PGIS   \n",
       "2         Philippines       5  ...      NaN    NaN    NaN     NaN      PGIS   \n",
       "3              Greece       8  ...      NaN    NaN    NaN     NaN      PGIS   \n",
       "4               Japan       4  ...      NaN    NaN    NaN     NaN      PGIS   \n",
       "\n",
       "   INT_LOG  INT_IDEO INT_MISC INT_ANY  related  \n",
       "0        0         0        0       0      NaN  \n",
       "1        0         1        1       1      NaN  \n",
       "2       -9        -9        1       1      NaN  \n",
       "3       -9        -9        1       1      NaN  \n",
       "4       -9        -9        1       1      NaN  \n",
       "\n",
       "[5 rows x 135 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method DataFrame.info of              eventid  iyear  imonth  iday approxdate  extended resolution  \\\n",
       "0       197000000001   1970       7     2        NaN         0        NaN   \n",
       "1       197000000002   1970       0     0        NaN         0        NaN   \n",
       "2       197001000001   1970       1     0        NaN         0        NaN   \n",
       "3       197001000002   1970       1     0        NaN         0        NaN   \n",
       "4       197001000003   1970       1     0        NaN         0        NaN   \n",
       "...              ...    ...     ...   ...        ...       ...        ...   \n",
       "181686  201712310022   2017      12    31        NaN         0        NaN   \n",
       "181687  201712310029   2017      12    31        NaN         0        NaN   \n",
       "181688  201712310030   2017      12    31        NaN         0        NaN   \n",
       "181689  201712310031   2017      12    31        NaN         0        NaN   \n",
       "181690  201712310032   2017      12    31        NaN         0        NaN   \n",
       "\n",
       "        country         country_txt  region  ... addnotes  \\\n",
       "0            58  Dominican Republic       2  ...      NaN   \n",
       "1           130              Mexico       1  ...      NaN   \n",
       "2           160         Philippines       5  ...      NaN   \n",
       "3            78              Greece       8  ...      NaN   \n",
       "4           101               Japan       4  ...      NaN   \n",
       "...         ...                 ...     ...  ...      ...   \n",
       "181686      182             Somalia      11  ...      NaN   \n",
       "181687      200               Syria      10  ...      NaN   \n",
       "181688      160         Philippines       5  ...      NaN   \n",
       "181689       92               India       6  ...      NaN   \n",
       "181690      160         Philippines       5  ...      NaN   \n",
       "\n",
       "                                                   scite1  \\\n",
       "0                                                     NaN   \n",
       "1                                                     NaN   \n",
       "2                                                     NaN   \n",
       "3                                                     NaN   \n",
       "4                                                     NaN   \n",
       "...                                                   ...   \n",
       "181686  \"Somalia: Al-Shabaab Militants Attack Army Che...   \n",
       "181687  \"Putin's 'victory' in Syria has turned into a ...   \n",
       "181688  \"Maguindanao clashes trap tribe members,\" Phil...   \n",
       "181689  \"Trader escapes grenade attack in Imphal,\" Bus...   \n",
       "181690  \"Security tightened in Cotabato following IED ...   \n",
       "\n",
       "                                                   scite2  \\\n",
       "0                                                     NaN   \n",
       "1                                                     NaN   \n",
       "2                                                     NaN   \n",
       "3                                                     NaN   \n",
       "4                                                     NaN   \n",
       "...                                                   ...   \n",
       "181686  \"Highlights: Somalia Daily Media Highlights 2 ...   \n",
       "181687  \"Two Russian soldiers killed at Hmeymim base i...   \n",
       "181688                                                NaN   \n",
       "181689                                                NaN   \n",
       "181690  \"Security tightened in Cotabato City,\" Manila ...   \n",
       "\n",
       "                                                   scite3  \\\n",
       "0                                                     NaN   \n",
       "1                                                     NaN   \n",
       "2                                                     NaN   \n",
       "3                                                     NaN   \n",
       "4                                                     NaN   \n",
       "...                                                   ...   \n",
       "181686  \"Highlights: Somalia Daily Media Highlights 1 ...   \n",
       "181687  \"Two Russian servicemen killed in Syria mortar...   \n",
       "181688                                                NaN   \n",
       "181689                                                NaN   \n",
       "181690                                                NaN   \n",
       "\n",
       "                        dbsource  INT_LOG  INT_IDEO INT_MISC INT_ANY  related  \n",
       "0                           PGIS        0         0        0       0      NaN  \n",
       "1                           PGIS        0         1        1       1      NaN  \n",
       "2                           PGIS       -9        -9        1       1      NaN  \n",
       "3                           PGIS       -9        -9        1       1      NaN  \n",
       "4                           PGIS       -9        -9        1       1      NaN  \n",
       "...                          ...      ...       ...      ...     ...      ...  \n",
       "181686  START Primary Collection        0         0        0       0      NaN  \n",
       "181687  START Primary Collection       -9        -9        1       1      NaN  \n",
       "181688  START Primary Collection        0         0        0       0      NaN  \n",
       "181689  START Primary Collection       -9        -9        0      -9      NaN  \n",
       "181690  START Primary Collection       -9        -9        0      -9      NaN  \n",
       "\n",
       "[181691 rows x 135 columns]>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>iyear</th>\n",
       "      <th>imonth</th>\n",
       "      <th>iday</th>\n",
       "      <th>extended</th>\n",
       "      <th>country</th>\n",
       "      <th>region</th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>specificity</th>\n",
       "      <th>...</th>\n",
       "      <th>ransomamt</th>\n",
       "      <th>ransomamtus</th>\n",
       "      <th>ransompaid</th>\n",
       "      <th>ransompaidus</th>\n",
       "      <th>hostkidoutcome</th>\n",
       "      <th>nreleased</th>\n",
       "      <th>INT_LOG</th>\n",
       "      <th>INT_IDEO</th>\n",
       "      <th>INT_MISC</th>\n",
       "      <th>INT_ANY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>1.816910e+05</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>177135.000000</td>\n",
       "      <td>1.771340e+05</td>\n",
       "      <td>181685.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.350000e+03</td>\n",
       "      <td>5.630000e+02</td>\n",
       "      <td>7.740000e+02</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>10991.000000</td>\n",
       "      <td>10400.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "      <td>181691.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>2.002705e+11</td>\n",
       "      <td>2002.638997</td>\n",
       "      <td>6.467277</td>\n",
       "      <td>15.505644</td>\n",
       "      <td>0.045346</td>\n",
       "      <td>131.968501</td>\n",
       "      <td>7.160938</td>\n",
       "      <td>23.498343</td>\n",
       "      <td>-4.586957e+02</td>\n",
       "      <td>1.451452</td>\n",
       "      <td>...</td>\n",
       "      <td>3.172530e+06</td>\n",
       "      <td>5.784865e+05</td>\n",
       "      <td>7.179437e+05</td>\n",
       "      <td>240.378623</td>\n",
       "      <td>4.629242</td>\n",
       "      <td>-29.018269</td>\n",
       "      <td>-4.543731</td>\n",
       "      <td>-4.464398</td>\n",
       "      <td>0.090010</td>\n",
       "      <td>-3.945952</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>1.325957e+09</td>\n",
       "      <td>13.259430</td>\n",
       "      <td>3.388303</td>\n",
       "      <td>8.814045</td>\n",
       "      <td>0.208063</td>\n",
       "      <td>112.414535</td>\n",
       "      <td>2.933408</td>\n",
       "      <td>18.569242</td>\n",
       "      <td>2.047790e+05</td>\n",
       "      <td>0.995430</td>\n",
       "      <td>...</td>\n",
       "      <td>3.021157e+07</td>\n",
       "      <td>7.077924e+06</td>\n",
       "      <td>1.014392e+07</td>\n",
       "      <td>2940.967293</td>\n",
       "      <td>2.035360</td>\n",
       "      <td>65.720119</td>\n",
       "      <td>4.543547</td>\n",
       "      <td>4.637152</td>\n",
       "      <td>0.568457</td>\n",
       "      <td>4.691325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>1.970000e+11</td>\n",
       "      <td>1970.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-53.154613</td>\n",
       "      <td>-8.618590e+07</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>-9.900000e+01</td>\n",
       "      <td>-9.900000e+01</td>\n",
       "      <td>-9.900000e+01</td>\n",
       "      <td>-99.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-99.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>1.991021e+11</td>\n",
       "      <td>1991.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>11.510046</td>\n",
       "      <td>4.545640e+00</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-9.900000e+01</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>-99.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>2.009022e+11</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>98.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>31.467463</td>\n",
       "      <td>4.324651e+01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.500000e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>2.014081e+11</td>\n",
       "      <td>2014.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>160.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>34.685087</td>\n",
       "      <td>6.871033e+01</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>4.000000e+05</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.273412e+03</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>2.017123e+11</td>\n",
       "      <td>2017.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1004.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>74.633553</td>\n",
       "      <td>1.793667e+02</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000e+09</td>\n",
       "      <td>1.320000e+08</td>\n",
       "      <td>2.750000e+08</td>\n",
       "      <td>48000.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>2769.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 77 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            eventid          iyear         imonth           iday  \\\n",
       "count  1.816910e+05  181691.000000  181691.000000  181691.000000   \n",
       "mean   2.002705e+11    2002.638997       6.467277      15.505644   \n",
       "std    1.325957e+09      13.259430       3.388303       8.814045   \n",
       "min    1.970000e+11    1970.000000       0.000000       0.000000   \n",
       "25%    1.991021e+11    1991.000000       4.000000       8.000000   \n",
       "50%    2.009022e+11    2009.000000       6.000000      15.000000   \n",
       "75%    2.014081e+11    2014.000000       9.000000      23.000000   \n",
       "max    2.017123e+11    2017.000000      12.000000      31.000000   \n",
       "\n",
       "            extended        country         region       latitude  \\\n",
       "count  181691.000000  181691.000000  181691.000000  177135.000000   \n",
       "mean        0.045346     131.968501       7.160938      23.498343   \n",
       "std         0.208063     112.414535       2.933408      18.569242   \n",
       "min         0.000000       4.000000       1.000000     -53.154613   \n",
       "25%         0.000000      78.000000       5.000000      11.510046   \n",
       "50%         0.000000      98.000000       6.000000      31.467463   \n",
       "75%         0.000000     160.000000      10.000000      34.685087   \n",
       "max         1.000000    1004.000000      12.000000      74.633553   \n",
       "\n",
       "          longitude    specificity  ...     ransomamt   ransomamtus  \\\n",
       "count  1.771340e+05  181685.000000  ...  1.350000e+03  5.630000e+02   \n",
       "mean  -4.586957e+02       1.451452  ...  3.172530e+06  5.784865e+05   \n",
       "std    2.047790e+05       0.995430  ...  3.021157e+07  7.077924e+06   \n",
       "min   -8.618590e+07       1.000000  ... -9.900000e+01 -9.900000e+01   \n",
       "25%    4.545640e+00       1.000000  ...  0.000000e+00  0.000000e+00   \n",
       "50%    4.324651e+01       1.000000  ...  1.500000e+04  0.000000e+00   \n",
       "75%    6.871033e+01       1.000000  ...  4.000000e+05  0.000000e+00   \n",
       "max    1.793667e+02       5.000000  ...  1.000000e+09  1.320000e+08   \n",
       "\n",
       "         ransompaid  ransompaidus  hostkidoutcome     nreleased  \\\n",
       "count  7.740000e+02    552.000000    10991.000000  10400.000000   \n",
       "mean   7.179437e+05    240.378623        4.629242    -29.018269   \n",
       "std    1.014392e+07   2940.967293        2.035360     65.720119   \n",
       "min   -9.900000e+01    -99.000000        1.000000    -99.000000   \n",
       "25%   -9.900000e+01      0.000000        2.000000    -99.000000   \n",
       "50%    0.000000e+00      0.000000        4.000000      0.000000   \n",
       "75%    1.273412e+03      0.000000        7.000000      1.000000   \n",
       "max    2.750000e+08  48000.000000        7.000000   2769.000000   \n",
       "\n",
       "             INT_LOG       INT_IDEO       INT_MISC        INT_ANY  \n",
       "count  181691.000000  181691.000000  181691.000000  181691.000000  \n",
       "mean       -4.543731      -4.464398       0.090010      -3.945952  \n",
       "std         4.543547       4.637152       0.568457       4.691325  \n",
       "min        -9.000000      -9.000000      -9.000000      -9.000000  \n",
       "25%        -9.000000      -9.000000       0.000000      -9.000000  \n",
       "50%        -9.000000      -9.000000       0.000000       0.000000  \n",
       "75%         0.000000       0.000000       0.000000       0.000000  \n",
       "max         1.000000       1.000000       1.000000       1.000000  \n",
       "\n",
       "[8 rows x 77 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(181691, 135)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "eventid            0\n",
       "iyear              0\n",
       "imonth             0\n",
       "iday               0\n",
       "approxdate    172452\n",
       "               ...  \n",
       "INT_LOG            0\n",
       "INT_IDEO           0\n",
       "INT_MISC           0\n",
       "INT_ANY            0\n",
       "related       156653\n",
       "Length: 135, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#to check NaN values\n",
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "eventid            0\n",
       "iyear              0\n",
       "imonth             0\n",
       "iday               0\n",
       "approxdate    172452\n",
       "               ...  \n",
       "INT_LOG            0\n",
       "INT_IDEO           0\n",
       "INT_MISC           0\n",
       "INT_ANY            0\n",
       "related       156653\n",
       "Length: 135, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#to check Null values\n",
    "\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Most terrorism affected country each  decade. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We filter out the columns which we need to analyse and answer this question.\n",
    "\n",
    "df1 = df.filter(['eventid','iyear','country', 'country_txt'], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>iyear</th>\n",
       "      <th>country</th>\n",
       "      <th>country_txt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>197000000001</td>\n",
       "      <td>1970</td>\n",
       "      <td>58</td>\n",
       "      <td>Dominican Republic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197000000002</td>\n",
       "      <td>1970</td>\n",
       "      <td>130</td>\n",
       "      <td>Mexico</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>197001000001</td>\n",
       "      <td>1970</td>\n",
       "      <td>160</td>\n",
       "      <td>Philippines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>197001000002</td>\n",
       "      <td>1970</td>\n",
       "      <td>78</td>\n",
       "      <td>Greece</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>197001000003</td>\n",
       "      <td>1970</td>\n",
       "      <td>101</td>\n",
       "      <td>Japan</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>201712310022</td>\n",
       "      <td>2017</td>\n",
       "      <td>182</td>\n",
       "      <td>Somalia</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>2017</td>\n",
       "      <td>200</td>\n",
       "      <td>Syria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>2017</td>\n",
       "      <td>160</td>\n",
       "      <td>Philippines</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181689</td>\n",
       "      <td>201712310031</td>\n",
       "      <td>2017</td>\n",
       "      <td>92</td>\n",
       "      <td>India</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181690</td>\n",
       "      <td>201712310032</td>\n",
       "      <td>2017</td>\n",
       "      <td>160</td>\n",
       "      <td>Philippines</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>181691 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid  iyear  country         country_txt\n",
       "0       197000000001   1970       58  Dominican Republic\n",
       "1       197000000002   1970      130              Mexico\n",
       "2       197001000001   1970      160         Philippines\n",
       "3       197001000002   1970       78              Greece\n",
       "4       197001000003   1970      101               Japan\n",
       "...              ...    ...      ...                 ...\n",
       "181686  201712310022   2017      182             Somalia\n",
       "181687  201712310029   2017      200               Syria\n",
       "181688  201712310030   2017      160         Philippines\n",
       "181689  201712310031   2017       92               India\n",
       "181690  201712310032   2017      160         Philippines\n",
       "\n",
       "[181691 rows x 4 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We now create a new column called \"decade\" which will segregate the data from iyear into decades."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "    decade = []\n",
    "    for row in df['iyear']:\n",
    "        if row < 1980:    decade.append('1970s')\n",
    "        elif row < 1990:  decade.append('1980s')\n",
    "        elif row < 2000:  decade.append('1990s')\n",
    "        elif row < 2010:  decade.append('2000s')\n",
    "        else:    decade.append('2010s')\n",
    "    # Create a column from the list\n",
    "    df1['decade'] = decade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2010s    86815\n",
       "1980s    31160\n",
       "1990s    28762\n",
       "2000s    25040\n",
       "1970s     9914\n",
       "Name: decade, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1['decade'].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>iyear</th>\n",
       "      <th>country</th>\n",
       "      <th>country_txt</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>197000000001</td>\n",
       "      <td>1970</td>\n",
       "      <td>58</td>\n",
       "      <td>Dominican Republic</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197000000002</td>\n",
       "      <td>1970</td>\n",
       "      <td>130</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>197001000001</td>\n",
       "      <td>1970</td>\n",
       "      <td>160</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>197001000002</td>\n",
       "      <td>1970</td>\n",
       "      <td>78</td>\n",
       "      <td>Greece</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>197001000003</td>\n",
       "      <td>1970</td>\n",
       "      <td>101</td>\n",
       "      <td>Japan</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>201712310022</td>\n",
       "      <td>2017</td>\n",
       "      <td>182</td>\n",
       "      <td>Somalia</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>2017</td>\n",
       "      <td>200</td>\n",
       "      <td>Syria</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>2017</td>\n",
       "      <td>160</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181689</td>\n",
       "      <td>201712310031</td>\n",
       "      <td>2017</td>\n",
       "      <td>92</td>\n",
       "      <td>India</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181690</td>\n",
       "      <td>201712310032</td>\n",
       "      <td>2017</td>\n",
       "      <td>160</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>181691 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid  iyear  country         country_txt decade\n",
       "0       197000000001   1970       58  Dominican Republic  1970s\n",
       "1       197000000002   1970      130              Mexico  1970s\n",
       "2       197001000001   1970      160         Philippines  1970s\n",
       "3       197001000002   1970       78              Greece  1970s\n",
       "4       197001000003   1970      101               Japan  1970s\n",
       "...              ...    ...      ...                 ...    ...\n",
       "181686  201712310022   2017      182             Somalia  2010s\n",
       "181687  201712310029   2017      200               Syria  2010s\n",
       "181688  201712310030   2017      160         Philippines  2010s\n",
       "181689  201712310031   2017       92               India  2010s\n",
       "181690  201712310032   2017      160         Philippines  2010s\n",
       "\n",
       "[181691 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1728x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pd.crosstab(df1.decade,df1.country_txt).plot.barh(stacked=True,width=1,color=sns.color_palette('RdYlGn',9))\n",
    "fig=plt.gcf()\n",
    "fig.set_size_inches(24,8)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since, the approach did not give us clear results, we are going to find our answers by creating a df for each decade and then only choosing top 5 affected countries in each decade to understand the trend better."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#to analyse decade-wise \n",
    "d12 = df1.filter(['decade', 'country_txt'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_txt</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Iraq</td>\n",
       "      <td>24636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>14368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>12731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>India</td>\n",
       "      <td>11960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Colombia</td>\n",
       "      <td>8306</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   country_txt  decade\n",
       "0         Iraq   24636\n",
       "1     Pakistan   14368\n",
       "2  Afghanistan   12731\n",
       "3        India   11960\n",
       "4     Colombia    8306"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#finding top 5 countries with most attack in 1970s\n",
    "df70 = d12[d12['decade'] >= '1970s']\n",
    "df701=df70.groupby('country_txt').count().sort_values('decade',ascending=False).head(5).reset_index()\n",
    "df701\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_txt</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Iraq</td>\n",
       "      <td>24630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>14351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>12727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>India</td>\n",
       "      <td>11936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Colombia</td>\n",
       "      <td>7887</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   country_txt  decade\n",
       "0         Iraq   24630\n",
       "1     Pakistan   14351\n",
       "2  Afghanistan   12727\n",
       "3        India   11936\n",
       "4     Colombia    7887"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#finding top 5 countries with most attack in 1980s\n",
    "df80 = d12[d12['decade'] >= '1980s']\n",
    "df801=df80.groupby('country_txt').count().sort_values('decade',ascending=False).head(5).reset_index()\n",
    "df801"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_txt</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Iraq</td>\n",
       "      <td>24600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>14155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>12705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>India</td>\n",
       "      <td>10708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>5866</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   country_txt  decade\n",
       "0         Iraq   24600\n",
       "1     Pakistan   14155\n",
       "2  Afghanistan   12705\n",
       "3        India   10708\n",
       "4  Philippines    5866"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#finding top 5 countries with most attack in 1990s\n",
    "df90 = d12[d12['decade'] >= '1990s']\n",
    "df901=df90.groupby('country_txt').count().sort_values('decade',ascending=False).head(5).reset_index()\n",
    "df901"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_txt</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Iraq</td>\n",
       "      <td>24475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>12607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>12551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>India</td>\n",
       "      <td>8918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>4920</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   country_txt  decade\n",
       "0         Iraq   24475\n",
       "1  Afghanistan   12607\n",
       "2     Pakistan   12551\n",
       "3        India    8918\n",
       "4  Philippines    4920"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#finding top 5 countries with most attack in 2000s\n",
    "df00 = d12[d12['decade'] >= '2000s']\n",
    "df001=df00.groupby('country_txt').count().sort_values('decade',ascending=False).head(5).reset_index()\n",
    "df001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>country_txt</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Iraq</td>\n",
       "      <td>19286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>10658</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>10571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>India</td>\n",
       "      <td>6348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>3898</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   country_txt  decade\n",
       "0         Iraq   19286\n",
       "1  Afghanistan   10658\n",
       "2     Pakistan   10571\n",
       "3        India    6348\n",
       "4  Philippines    3898"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#finding top 5 countries with most attack in 2010s\n",
    "df10 = d12[d12['decade'] >= '2010s']\n",
    "df101=df10.groupby('country_txt').count().sort_values('decade',ascending=False).head(5).reset_index()\n",
    "df101"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x11bc11ac8>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAE5CAYAAAByNUwBAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAecklEQVR4nO3debwcdZ3u8c9jWGIEIUAG0aCJGJRECJAEooAGeAkBHRaRzQWuotELjMh4HaN3HBBlBhzXMAoXJSyKIqgYGBEmLKKCQRIJa0AiohxkiQFZhECW5/5Rv0OapE/OlpzqQz/v16tf3f2rpb9dkPN0Vf3qV7JNRES0t5fVXUBERNQvYRAREQmDiIhIGEREBAmDiIggYRAREcB6dRfQV1tssYVHjRpVdxkREYPKvHnz/mp7xKrtgzYMRo0axdy5c+suIyJiUJH0p2btOUwUERHdh4GkrSVdJ+kuSXdKOqG0nyzpQUnzy2P/hmU+I2mhpHsk7dvQPrW0LZQ0vaF9tKSbSvsPJW2wtr9oRER0rSd7BsuAT9oeC0wGjpM0tkz7mu0dy+MKgDLtCGAcMBX4lqQhkoYA3wT2A8YCRzas5/SyrjcAjwPHrKXvFxERPdDtOQPbDwEPlddPSVoAvGYNixwIXGT7OeCPkhYCu5RpC23fByDpIuDAsr69gPeWec4HTgbO7P3XiYh2sXTpUjo6OliyZEndpbSkoUOHMnLkSNZff/0ezd+rE8iSRgE7ATcBuwHHSzoKmEu19/A4VVDMaVisg5Xh8cAq7bsCmwN/s72syfwREU11dHSw8cYbM2rUKCTVXU5Lsc3ixYvp6Ohg9OjRPVqmxyeQJW0E/Bj4hO0nqX65bwPsSLXn8JXel9w7kqZJmitp7qJFi9b1x0VEC1uyZAmbb755gqAJSWy++ea92mvqURhIWp8qCC60/RMA24/YXm57BfBtVh4KehDYumHxkaWtq/bFwKaS1lulfTW2z7Y90fbEESNW6yYbEW0mQdC13m6bnvQmEnAOsMD2Vxvat2qY7WDgjvL6MuAISRtKGg2MAX4L3AyMKT2HNqA6yXyZqxsqXAe8pyx/NDCrV98iIqJmJ598Ml/+8pfXybrPO+88jj/++HWy7k49OWewG/AB4HZJ80vbZ6l6A+0IGLgf+CiA7TslXQzcRdUT6TjbywEkHQ9cBQwBZtq+s6zv08BFkr4I3EIVPuvUqOk/W9cf0SP3n/bOukuIeElY2/+m2+3fZrd7BrZ/bVu2d2jsRmr7A7a3L+0HlF5Hncucansb22+0/fOG9itsb1umndrQfp/tXWy/wfahpSdSRERLO/XUU9l2223ZfffdueeeewD4wx/+wNSpU5kwYQJ77LEHd999NwCPPPIIBx98MOPHj2f8+PHceOONABx00EFMmDCBcePGcfbZZ7+w7nPPPZdtt92WXXbZhRtuuOGF9kWLFnHIIYcwadIkJk2a9KJp/TFoh6OIiKjTvHnzuOiii5g/fz7Lli1j5513ZsKECUybNo2zzjqLMWPGcNNNN3Hsscdy7bXX8vGPf5y3v/3tXHrppSxfvpynn34agJkzZ7LZZpvx7LPPMmnSJA455BCef/55TjrpJObNm8cmm2zCnnvuyU477QTACSecwIknnsjuu+/On//8Z/bdd18WLFjQ7++TMIiI6INf/epXHHzwwQwbNgyAAw44gCVLlnDjjTdy6KGHvjDfc89VBzquvfZaLrjgAgCGDBnCJptsAsCMGTO49NJLAXjggQe49957efjhh5kyZQqdHWUOP/xwfv/73wNw9dVXc9ddd72w/ieffJKnn36ajTbaqF/fJ2EQEbGWrFixgk033ZT58+d3PzPwi1/8gquvvprf/OY3DBs2jClTpnTbHXTFihXMmTOHoUOHro2SX5CB6iIi+uBtb3sbP/3pT3n22Wd56qmnuPzyyxk2bBijR4/mkksuAaqLv2699VYA9t57b848sxpYYfny5TzxxBM88cQTDB8+nGHDhnH33XczZ051ve6uu+7K9ddfz+LFi1m6dOkL6wPYZ599OOOMM15439Pg6U7CICKiD3beeWcOP/xwxo8fz3777cekSZMAuPDCCznnnHMYP34848aNY9asqqf8N77xDa677jq23357JkyYwF133cXUqVNZtmwZ2223HdOnT2fy5MkAbLXVVpx88sm85S1vYbfddmO77bZ74XNnzJjB3Llz2WGHHRg7dixnnXXWWvk+qrr5Dz4TJ050f+5nkK6lEYPbggULXvRHMlbXbBtJmmd74qrzZs8gIiISBhERkTCIiAgSBhExiA3Wc54DobfbJmEQEYPS0KFDWbx4cQKhic77GfTmWoRcdBYRg9LIkSPp6Ogg9zZprvNOZz2VMIiIQWn99dfv8V28ons5TBQREQmDiIhIGEREBAmDiIggYRARESQMIiKChEFERJAwiIgIEgYREUHCICIiSBhERAQJg4iIIGEQEREkDCIigoRBRESQMIiICBIGERFBwiAiIkgYREQECYOIiKAHYSBpa0nXSbpL0p2STijtm0maLene8jy8tEvSDEkLJd0maeeGdR1d5r9X0tEN7RMk3V6WmSFJ6+LLRkREcz3ZM1gGfNL2WGAycJykscB04BrbY4BrynuA/YAx5TENOBOq8ABOAnYFdgFO6gyQMs9HGpab2v+vFhERPdVtGNh+yPbvyuungAXAa4ADgfPLbOcDB5XXBwIXuDIH2FTSVsC+wGzbj9l+HJgNTC3TXml7jm0DFzSsKyIiBkCvzhlIGgXsBNwEbGn7oTLpYWDL8vo1wAMNi3WUtjW1dzRpj4iIAdLjMJC0EfBj4BO2n2ycVn7Rey3X1qyGaZLmSpq7aNGidf1xERFto0dhIGl9qiC40PZPSvMj5RAP5fnR0v4gsHXD4iNL25raRzZpX43ts21PtD1xxIgRPSk9IiJ6oCe9iQScAyyw/dWGSZcBnT2CjgZmNbQfVXoVTQaeKIeTrgL2kTS8nDjeB7iqTHtS0uTyWUc1rCsiIgbAej2YZzfgA8DtkuaXts8CpwEXSzoG+BNwWJl2BbA/sBB4BvgggO3HJH0BuLnMd4rtx8rrY4HzgJcDPy+PiIgYIN2Gge1fA131+9+7yfwGjutiXTOBmU3a5wJv7q6WiIhYN3IFckREJAwiIiJhEBERJAwiIoKEQUREkDCIiAgSBhERQcIgIiJIGEREBAmDiIggYRARESQMIiKChEFERJAwiIgIEgYREUHCICIiSBhERAQJg4iIIGEQEREkDCIigoRBRESQMIiICBIGERFBwiAiIkgYREQECYOIiCBhEBERJAwiIoKEQUREkDCIiAgSBhERQcIgIiJIGEREBD0IA0kzJT0q6Y6GtpMlPShpfnns3zDtM5IWSrpH0r4N7VNL20JJ0xvaR0u6qbT/UNIGa/MLRkRE93qyZ3AeMLVJ+9ds71geVwBIGgscAYwry3xL0hBJQ4BvAvsBY4Ejy7wAp5d1vQF4HDimP18oIiJ6r9swsP1L4LEeru9A4CLbz9n+I7AQ2KU8Ftq+z/bzwEXAgZIE7AX8qCx/PnBQL79DRET0U3/OGRwv6bZyGGl4aXsN8EDDPB2lrav2zYG/2V62SntERAygvobBmcA2wI7AQ8BX1lpFayBpmqS5kuYuWrRoID4yIqIt9CkMbD9ie7ntFcC3qQ4DATwIbN0w68jS1lX7YmBTSeut0t7V555te6LtiSNGjOhL6RER0USfwkDSVg1vDwY6expdBhwhaUNJo4ExwG+Bm4ExpefQBlQnmS+zbeA64D1l+aOBWX2pKSIi+m697maQ9ANgCrCFpA7gJGCKpB0BA/cDHwWwfaeki4G7gGXAcbaXl/UcD1wFDAFm2r6zfMSngYskfRG4BThnrX27iIjokW7DwPaRTZq7/INt+1Tg1CbtVwBXNGm/j5WHmSIioga5AjkiIhIGERHRg8NE8dI3avrP6i4BgPtPe2fdJUS0rewZREREwiAiIhIGERFBwiAiIkgYREQECYOIiCBhEBERJAwiIoKEQUREkDCIiAgSBhERQcYminiRjNMU7Sp7BhERkTCIiIiEQUREkDCIiAgSBhERQcIgIiJIGEREBAmDiIggYRARESQMIiKChEFERJAwiIgIEgYREUHCICIiSBhERAQJg4iIIDe3iYgu5EY/7SV7BhER0X0YSJop6VFJdzS0bSZptqR7y/Pw0i5JMyQtlHSbpJ0bljm6zH+vpKMb2idIur0sM0OS1vaXjIiINevJnsF5wNRV2qYD19geA1xT3gPsB4wpj2nAmVCFB3ASsCuwC3BSZ4CUeT7SsNyqnxUREetYt2Fg+5fAY6s0HwicX16fDxzU0H6BK3OATSVtBewLzLb9mO3HgdnA1DLtlbbn2DZwQcO6IiJigPT1nMGWth8qrx8GtiyvXwM80DBfR2lbU3tHk/aIiBhA/T6BXH7Rey3U0i1J0yTNlTR30aJFA/GRERFtoa9h8Eg5xEN5frS0Pwhs3TDfyNK2pvaRTdqbsn227Ym2J44YMaKPpUdExKr6GgaXAZ09go4GZjW0H1V6FU0GniiHk64C9pE0vJw43ge4qkx7UtLk0ovoqIZ1RUTEAOn2ojNJPwCmAFtI6qDqFXQacLGkY4A/AYeV2a8A9gcWAs8AHwSw/ZikLwA3l/lOsd15UvpYqh5LLwd+Xh4RETGAug0D20d2MWnvJvMaOK6L9cwEZjZpnwu8ubs6IiJi3ckVyBERkTCIiIiEQUREkDCIiAgSBhERQcIgIiJIGEREBAmDiIggYRARESQMIiKChEFERJAwiIgIEgYREUHCICIiSBhERAQJg4iIIGEQEREkDCIigoRBRESQMIiICBIGERFBwiAiIkgYREQECYOIiCBhEBERJAwiIoKEQUREkDCIiAgSBhERQcIgIiKA9eouICKi1Y2a/rO6SwDg/tPeuc7WnT2DiIhIGERERMIgIiLoZxhIul/S7ZLmS5pb2jaTNFvSveV5eGmXpBmSFkq6TdLODes5usx/r6Sj+/eVIiKit9bGnsGetne0PbG8nw5cY3sMcE15D7AfMKY8pgFnQhUewEnArsAuwEmdARIREQNjXRwmOhA4v7w+Hzioof0CV+YAm0raCtgXmG37MduPA7OBqeugroiI6EJ/w8DA/0iaJ2laadvS9kPl9cPAluX1a4AHGpbtKG1dta9G0jRJcyXNXbRoUT9Lj4iITv29zmB32w9K+gdgtqS7GyfatiT38zMa13c2cDbAxIkT19p6IyLaXb/2DGw/WJ4fBS6lOub/SDn8Q3l+tMz+ILB1w+IjS1tX7RERMUD6HAaSXiFp487XwD7AHcBlQGePoKOBWeX1ZcBRpVfRZOCJcjjpKmAfScPLieN9SltERAyQ/hwm2hK4VFLner5v+0pJNwMXSzoG+BNwWJn/CmB/YCHwDPBBANuPSfoCcHOZ7xTbj/WjroiI6KU+h4Ht+4DxTdoXA3s3aTdwXBfrmgnM7GstERHRP7kCOSIiEgYREZEwiIgIEgYREUHCICIiSBhERAQJg4iIIGEQEREkDCIigoRBRESQMIiICBIGERFBwiAiIkgYREQECYOIiCBhEBERJAwiIoKEQUREkDCIiAgSBhERQcIgIiJIGEREBAmDiIggYRARESQMIiKChEFERJAwiIgIEgYREUHCICIiSBhERAQJg4iIIGEQEREkDCIighYKA0lTJd0jaaGk6XXXExHRTloiDCQNAb4J7AeMBY6UNLbeqiIi2kdLhAGwC7DQ9n22nwcuAg6suaaIiLYh23XXgKT3AFNtf7i8/wCwq+3jV5lvGjCtvH0jcM+AFrq6LYC/1lxDq8i2WCnbYqVsi5VaZVu8zvaIVRvXq6OSvrJ9NnB23XV0kjTX9sS662gF2RYrZVuslG2xUqtvi1Y5TPQgsHXD+5GlLSIiBkCrhMHNwBhJoyVtABwBXFZzTRERbaMlDhPZXibpeOAqYAgw0/adNZfVEy1zyKoFZFuslG2xUrbFSi29LVriBHJERNSrVQ4TRUREjRIGERGRMIiIiIRBRETQIr2JBhNJM9Y03fbHB6qWuknaEDgEGEXD/0u2T6mrprpIeiurb4cLaiuoRpJGAJ+mGmdsaGe77b1qK6omknYD5tv+u6T3AzsD37D9p5pLW032DHpvKNV/0HvLY0dgA2BeebSTWVRjSC0D/t7waCuSvgt8GdgdmFQeLXul6QC4EFgAjAY+D9xPdS1ROzoTeEbSeOCTwB+AlvyRkK6lvSRpDrC77WXl/frAr2xPrreygSfpDttvrruOuklaAIx1/jEBIGme7QmSbrO9Q2m72fakumsbaJJ+Z3tnSf8GPGj7nM62umtbVfYMem848MqG9xuVtnZ0o6Tt6y6iBdwBvKruIlrI0vL8kKR3StoJ2KzOgmr0lKTPAB8AfibpZcD6NdfUVM4Z9N5pwC2SrgMEvA04udaK6rM78L8k/RF4jmp7uPPXYBvZArhL0m+ptgMAtg+or6RafVHSJlSHRc6g+vF0Yr0l1eZw4L3Ah2w/LOm1wH/WXFNTOUzUB5JeBexa3t5k++E666mLpNc1a2/Fk2PrkqS3N2u3ff1A1xKtp/w7GWP7aknDgCG2n6q7rlUlDPpA0nBgDC/uKfHL+iqql6R/4MXb4s81lhM1kfQvtr8k6QxgtT8s7dTTrpOkj1Ddg2Uz29tIGgOcZXvvmktbTQ4T9ZKkDwMnUA2zPR+YDPwGaMducwcAXwFeDTwKvI6qF8m4OusaaJImUx0O2Y6qZ9kQ4O+2X7nGBV96FpTnubVW0VqOo7qT400Atu8tP55aTsKg906g6jo4x/aekt4E/HvNNdXlC1RheLXtnSTtCby/5prq8F9Uw65fQtWl9Chg21orqoHty8vz+XXX0kKes/28JAAkrUeTvaZWkDDovSW2l0hC0oa275b0xrqLqslS24slvUzSy2xfJ+nrdRdVB9sLJQ2xvRw4V9ItwGfqrmsgSbqcNfyha9MT6tdL+izwcknvAI4FLq+5pqYSBr3XIWlT4KfAbEmPA211wrTB3yRtBPwSuFDSo7ThRWdUFxVtAMyX9CXgIdqz2/aXy/O7qbrafq+8PxJ4pJaK6jcdOAa4HfgocAXwnVor6kJOIPdD6UWyCXCl7efrrmegSXoF8CzVH773UW2L79l+rNbCBljpLfII1fmCE6m2wzdt/6HWwmrS7F6/rX7/32jPXy99JmmIpLs739u+3vZl7RgExb/ZXmF7me3zbc+gGpOm3Rxke4ntJ21/3vY/A++qu6gavULS6zvfSBoNvKLGemojaTdJsyX9XtJ9kv4o6b6662omewa9JGkW8E/pPrnyUvtV2l4YgqBddLEdbrG9U1011UnSVKpbPN5HdSHi64CP2r6q1sJqUH48nkg1btnyznbbi2srqgs5Z9B7w4E7y9WmLxwfb6eTY5L+N9WJsG0k3dYwaWPghnqqGniSjqS6unS0pMsaJr0SaKtDZY1sX1n607+pNN1t+7k1LfMS9oTtn9ddRE9kz6CXcrUplKEGhgP/QXWCrNNT7XS+oJwrGE2T7QDc1jmYYTvKkN4VSadRXXfyE148VMnvaiuqCwmD6DNJ2wAdtp+TNAXYAbjA9t/qrWxgdZ5It71C0rZUv4h/bntpN4u+JJUhvbehuiiz89CI2/QK5OuaNLsV7+2QMOghSU/RvA915+Bs7Xa1KZLmU11kNYqqy9wsYJzt/eusa6BJmgfsQbW3dAPV2P3P235frYXVJEN6D045Z9BDtjeuu4YWtML2MknvBs6wfUa52KrdyPYzko4BvlXG55lfd1E16hzS+6G6C6mLpPfb/p6kf2423fZXB7qm7iQMoj+WlpOoRwH/WNpacqz2dUyS3kJ1rcUxpW1IjfXULUN6r+xKO2h+ROYwUfSZpLHAx4Df2P5B6U9+mO3Tay5tQJVOBZ8EbrB9eulj/4l2PEYO6WQxWCUMIiLWkfLD4BtUAzqaaoTjE2233IVnOUwUvSbpYtuHSbqd5uPWt8VFZ5K+bvsTXQ3Q1maHRdLJornvA98EDi7vjwB+wMqbY7WM7BlEr0nayvZD7X6nM0kTbM/LYZHoSrMr8iXdant8XTV1JWEQfSZpv1WvrpT0Mdtn1VVTRCuRdDrwOHAR1V7T4VRdkP8ToJUu0kwYRJ9JuhH4V9vXlvf/Auxpe796KxtYknYDTqYag2c9Vh4Wef2alouXPkl/XMPklvp/JGEQfSZpC+C/gU8BU6muvD2y3UZxHUyDkUV0JWEQ/VLu53o11R/CD7XjVaeSbrLdcicEo36ShlIN6rg71WGiXwFn2V5Sa2FNJAyi15r0GtkAWFba2q7XyGAajCwGlqSLqQYu7Lzr23uBTW0fWl9VzSUMIvppMA1GFgNL0l22x3bX1gpynUH0i6ThwBhgaGeb7V/WV9HAs71n3TVEy/qdpMm25wBI2hWYW3NNTWXPIPpM0oeBE4CRVMMVT6YamqLtfhFLeicwjheH4in1VRStoIzg+kag886IrwXuoRxWbaULNLNnEP1xAjAJmGN7T0lvAv695poGnKSzgGHAnsB3gPcAv621qGgVU+suoKcSBtEfS2wvkYSkDW3fLemNdRdVg7fa3qFcbfp5SV8BBsWtDmPdkPRK209SnTxeTStdbNYpYRD90SFpU+CnwGxJjwNtMRTFKp4tz89IejWwGNiqxnqift8H3kXV5dpUFyJ2MtAyF5t1yjmDWCvK+DybAFe24UVnnwPOAPamGpTMwHdsf67WwiJ6IWEQvVYupPkY8AbgduCcdr75eyNJGwJDbT9Rdy1RH0k7r2l6K16DkjCIXpP0Q2Ap1dWU+wF/sn1CvVXVS9Jbqe4F/cKhV9sX1FZQ1KqLa086teQ1KAmD6DVJt9vevrxeD/it7TX+Enopk/RdYBuq7rWdYxO5Xe90FoNTTiBHXyztfGF7maQ1zdsOJgJj23FcpmhO0l62r5X07mbTbf9koGvqTsIg+mK8pCfLawEvL+/b9Y5WdwCvAh6qu5BoGW8HrgX+sck0U41j1VJymCiijxpud7kxsCPVhWaNA9W11W0vY3DLnkFE33257gKitZXeZYeweueClhuqJGEQ0Ue5x3H0wCzgCaqLz57rZt5a5TBRRD81ub8DVH8A5gKftH3fwFcVrUDSHbbfXHcdPZE9g4j++zrQQTUEgYAjqLqa/g6YCUyprbKo242Strd9e92FdCd7BhH9JOlW2+NXaZtve8dm0+KlT9LtVHuL61Hd7+M+qsNEnT3uWmbo6k7ZM4jov2ckHQb8qLx/D9B5j9v82mpP76q7gN7KnkFEP0l6PfAN4C1Uf/znACcCDwITbP+6xvKiBoNx/K6EQUQfSTrd9qclHWr7krrridYxGMfvShhE9FE5LrwDMK+dx2aK1Q3G8btyziCi764EHgc2ahiOo9MK25vUU1a0gEE3flf2DCL6SdIs2wc2vN8DONL2sTWWFTWStBz4e+db4OXAM7Tw+F3ZM4joJ9sHStoJOBI4DPgj8ON6q4o62R5Sdw29lTCI6CNJ21IFwJHAX4EfUu1t71lrYRF9kMNEEX0kaQVVb5FjbC8sbffZbrmbnUd052V1FxAxiL2b6h4G10n6tqS9efFJ5IhBI3sGEf0k6RXAgVSHi/YCLgAutf0/tRYW0QsJg4i1SNJw4FDgcNt7111PRE8lDCIiIucMIiIiYRDRb5I+IWnYWlrXZ3swzyhJ710bnxfRKWEQ0X+fAJqGgaTeXnzUbRhQ3U83YRBrVcIg2oKkoyTdJulWSd8tv66vLW3XSHptme88Se9pWO7p8jxF0i8k/UjS3ZIuVOXjwKupupde17mMpK9IuhX4v5J+2rC+d0i6tIsaTwNeLml+Wf+kUt9QSa+QdKekNwOnAXuU+U5cV9ss2ktOIMdLnqRxwKXAW23/VdJmwPnAj2yfL+lDwAG2D5J0HvDftn9Uln3a9kaSplDd3Hwc8BfgBuBTtn8t6X5gou2/lmVM1ZvoYlUjlC0A9rC9SNL3gR/YvryLWp+2vVHD+y8CQ6nGtumw/R+llv9je9DdQCVaV/YMoh3sBVzS+cfa9mNUN6L5fpn+XWD3Hqznt7Y7bK8A5lMdrmlmOWVsIle/tr4LvF/SpuVzf96L2k8B3gFMBL7Ui+UieiVjE0W82DLKjyRJLwM2aJj2XMPr5XT972eJ7eUN788FLqe6FeYlvbzj1ebARsD6VHsIf1/z7BF9kz2DaAfXAodK2hygHCa6ETiiTH8f1RhDAPcDE8rrA6j+CHfnKWDjriba/gvVoaV/pQqGNVkqqfEz/x/wOeBC4PSefF5EX2TPIF7ybN8p6VTg+jLO/C3APwHnSvoUsAj4YJn928CscvL3Snr2S/xs4EpJf1nDiKUXAiNsL+jBum6T9DvgKmCp7e+XXkk3StqLKriWlxrPs/21HtQYsUY5gRwxACT9F3CL7XPqriWimYRBxDomaR7VHsY7bD/X3fwRdUgYRNRA0k3Ahqs0f8D27XXUE5EwiIiI9CaKiIiEQUREkDCIiAgSBhERQcIgIiJIGEREBPD/Acsqa5CLx/BwAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#bar graph showing top 5 countries attacked each decade\n",
    "df701.plot(kind='bar',x='country_txt',y='decade')\n",
    "df801.plot(kind='bar',x='country_txt',y='decade')\n",
    "df901.plot(kind='bar',x='country_txt',y='decade')\n",
    "df001.plot(kind='bar',x='country_txt',y='decade')\n",
    "df101.plot(kind='bar',x='country_txt',y='decade')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each decade, we can se the following observations,\n",
    "\n",
    "For 1970's, Iraq was the most affected country with 24636 attacks. Followed by Pakistan\twith 14368 attacks.\n",
    "\n",
    "For 1980's, Iraq once again was the most affected country with 24630 attacks. Followed by Pakistan with 14351 attacks.\n",
    "\n",
    "For 1990's, Iraq once again was the most affected country with 24600 attacks. Followed by Pakistan with 14155 attacks.\n",
    "\n",
    "For 2000's, Iraq once again was the most affected country with 24475 attacks. Followed by Afghanistan with 12607 attacks.\n",
    "\n",
    "For 2010's, Iraq once again was the most affected country with 19286 attacks. Followed by Afghanistan with 10658 attacks.\n",
    "\n",
    "It can be seen that Iraq remains on the top of all decades as most affected country. Pakistan and Afghanistan tussle for the second spot in each decade.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. To find the most popular target type assassinated.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>attacktype1_txt</th>\n",
       "      <th>targtype1_txt</th>\n",
       "      <th>targsubtype1_txt</th>\n",
       "      <th>target1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>197000000001</td>\n",
       "      <td>Assassination</td>\n",
       "      <td>Private Citizens &amp; Property</td>\n",
       "      <td>Named Civilian</td>\n",
       "      <td>Julio Guzman</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197000000002</td>\n",
       "      <td>Hostage Taking (Kidnapping)</td>\n",
       "      <td>Government (Diplomatic)</td>\n",
       "      <td>Diplomatic Personnel (outside of embassy, cons...</td>\n",
       "      <td>Nadine Chaval, daughter</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>197001000001</td>\n",
       "      <td>Assassination</td>\n",
       "      <td>Journalists &amp; Media</td>\n",
       "      <td>Radio Journalist/Staff/Facility</td>\n",
       "      <td>Employee</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>197001000002</td>\n",
       "      <td>Bombing/Explosion</td>\n",
       "      <td>Government (Diplomatic)</td>\n",
       "      <td>Embassy/Consulate</td>\n",
       "      <td>U.S. Embassy</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>197001000003</td>\n",
       "      <td>Facility/Infrastructure Attack</td>\n",
       "      <td>Government (Diplomatic)</td>\n",
       "      <td>Embassy/Consulate</td>\n",
       "      <td>U.S. Consulate</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>201712310022</td>\n",
       "      <td>Armed Assault</td>\n",
       "      <td>Military</td>\n",
       "      <td>Military Checkpoint</td>\n",
       "      <td>Checkpoint</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>Bombing/Explosion</td>\n",
       "      <td>Military</td>\n",
       "      <td>Military Barracks/Base/Headquarters/Checkpost</td>\n",
       "      <td>Hmeymim Air Base</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>Facility/Infrastructure Attack</td>\n",
       "      <td>Private Citizens &amp; Property</td>\n",
       "      <td>House/Apartment/Residence</td>\n",
       "      <td>Houses</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181689</td>\n",
       "      <td>201712310031</td>\n",
       "      <td>Bombing/Explosion</td>\n",
       "      <td>Government (General)</td>\n",
       "      <td>Government Building/Facility/Office</td>\n",
       "      <td>Office</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181690</td>\n",
       "      <td>201712310032</td>\n",
       "      <td>Bombing/Explosion</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Unknown</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>181691 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid                 attacktype1_txt  \\\n",
       "0       197000000001                   Assassination   \n",
       "1       197000000002     Hostage Taking (Kidnapping)   \n",
       "2       197001000001                   Assassination   \n",
       "3       197001000002               Bombing/Explosion   \n",
       "4       197001000003  Facility/Infrastructure Attack   \n",
       "...              ...                             ...   \n",
       "181686  201712310022                   Armed Assault   \n",
       "181687  201712310029               Bombing/Explosion   \n",
       "181688  201712310030  Facility/Infrastructure Attack   \n",
       "181689  201712310031               Bombing/Explosion   \n",
       "181690  201712310032               Bombing/Explosion   \n",
       "\n",
       "                      targtype1_txt  \\\n",
       "0       Private Citizens & Property   \n",
       "1           Government (Diplomatic)   \n",
       "2               Journalists & Media   \n",
       "3           Government (Diplomatic)   \n",
       "4           Government (Diplomatic)   \n",
       "...                             ...   \n",
       "181686                     Military   \n",
       "181687                     Military   \n",
       "181688  Private Citizens & Property   \n",
       "181689         Government (General)   \n",
       "181690                      Unknown   \n",
       "\n",
       "                                         targsubtype1_txt  \\\n",
       "0                                          Named Civilian   \n",
       "1       Diplomatic Personnel (outside of embassy, cons...   \n",
       "2                         Radio Journalist/Staff/Facility   \n",
       "3                                       Embassy/Consulate   \n",
       "4                                       Embassy/Consulate   \n",
       "...                                                   ...   \n",
       "181686                                Military Checkpoint   \n",
       "181687      Military Barracks/Base/Headquarters/Checkpost   \n",
       "181688                          House/Apartment/Residence   \n",
       "181689                Government Building/Facility/Office   \n",
       "181690                                                NaN   \n",
       "\n",
       "                        target1  \n",
       "0                  Julio Guzman  \n",
       "1       Nadine Chaval, daughter  \n",
       "2                      Employee  \n",
       "3                  U.S. Embassy  \n",
       "4                U.S. Consulate  \n",
       "...                         ...  \n",
       "181686               Checkpoint  \n",
       "181687         Hmeymim Air Base  \n",
       "181688                   Houses  \n",
       "181689                   Office  \n",
       "181690                  Unknown  \n",
       "\n",
       "[181691 rows x 5 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We filter out the columns which we need to analyse and answer this question.\n",
    "\n",
    "df2 = df.filter(['eventid','attacktype1_txt','targtype1_txt','targsubtype1_txt','target1'], axis=1)\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "eventid                 0\n",
       "attacktype1_txt         0\n",
       "targtype1_txt           0\n",
       "targsubtype1_txt    10373\n",
       "target1               636\n",
       "dtype: int64"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 10373 rows which don't have target subtype. Since, we have to find out most popular target type, we can drop these rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#dropping NaN values\n",
    "df2a = df2.dropna(subset=['targsubtype1_txt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(171318, 5)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2a.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "eventid               0\n",
       "attacktype1_txt       0\n",
       "targtype1_txt         0\n",
       "targsubtype1_txt      0\n",
       "target1             394\n",
       "dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2a.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since, we have to find the most common group being assasined, we need values from column targsubtype1_txt to group. Now, it has no NaN or missing values, we can opearate on it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 171318 entries, 0 to 181689\n",
      "Data columns (total 5 columns):\n",
      "eventid             171318 non-null int64\n",
      "attacktype1_txt     171318 non-null object\n",
      "targtype1_txt       171318 non-null object\n",
      "targsubtype1_txt    171318 non-null object\n",
      "target1             170924 non-null object\n",
      "dtypes: int64(1), object(4)\n",
      "memory usage: 7.8+ MB\n"
     ]
    }
   ],
   "source": [
    "df2a.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#to display all rows\n",
    "pd.set_option('display.max_rows',200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed Civilian/Unspecified                                               11596\n",
       "Police Security Forces/Officers                                            11178\n",
       "Military Unit/Patrol/Convoy                                                 8277\n",
       "Military Personnel (soldiers, troops, officers, forces)                     7963\n",
       "Government Personnel (excluding police, military)                           6610\n",
       "Village/City/Town/Suburb                                                    6542\n",
       "Politician or Political Party Movement/Meeting/Rally                        6306\n",
       "Police Building (headquarters, station, school)                             5907\n",
       "Military Barracks/Base/Headquarters/Checkpost                               5211\n",
       "Police Patrol (including vehicles and convoys)                              5105\n",
       "Government Building/Facility/Office                                         4802\n",
       "Retail/Grocery/Bakery                                                       4274\n",
       "Electricity                                                                 4198\n",
       "Bank/Commerce                                                               3242\n",
       "House/Apartment/Residence                                                   3044\n",
       "School/University/Educational Building                                      2990\n",
       "Vehicles/Transportation                                                     2928\n",
       "Marketplace/Plaza/Square                                                    2840\n",
       "Bus (excluding tourists)                                                    2818\n",
       "Place of Worship                                                            2630\n",
       "Named Civilian                                                              2551\n",
       "Laborer (General)/Occupation Identified                                     2497\n",
       "Train/Train Tracks/Trolley                                                  2213\n",
       "Religion Identified                                                         2189\n",
       "Non-State Militia                                                           2014\n",
       "Military Transportation/Vehicle (excluding convoys)                         1989\n",
       "Political Party Member/Rally                                                1932\n",
       "Military Checkpoint                                                         1911\n",
       "Police Checkpoint                                                           1828\n",
       "Restaurant/Bar/CafÃ©                                                         1827\n",
       "Race/Ethnicity Identified                                                   1726\n",
       "Embassy/Consulate                                                           1596\n",
       "Newspaper Journalist/Staff/Facility                                         1482\n",
       "Party Official/Candidate/Other Personnel                                    1405\n",
       "Public Area (garden, parking lot, garage, beach, public building, camp)     1369\n",
       "Judge/Attorney/Court                                                        1330\n",
       "Industrial/Textiles/Factory                                                 1293\n",
       "Religious Figure                                                            1280\n",
       "Oil                                                                         1184\n",
       "Construction                                                                1128\n",
       "Gas/Oil/Electric                                                            1042\n",
       "Multinational Corporation                                                   1037\n",
       "Hotel/Resort                                                                1019\n",
       "NATO                                                                         986\n",
       "Election-related                                                             979\n",
       "International Organization (peacekeeper, aid agency, compound)               957\n",
       "Diplomatic Personnel (outside of embassy, consulate)                         951\n",
       "Entertainment/Cultural/Stadium/Casino                                        941\n",
       "Terrorist                                                                    923\n",
       "Paramilitary                                                                 911\n",
       "Farm/Ranch                                                                   884\n",
       "Teacher/Professor/Instructor                                                 817\n",
       "Labor Union Related                                                          815\n",
       "Medical/Pharmaceutical                                                       715\n",
       "Radio Journalist/Staff/Facility                                              706\n",
       "Intelligence                                                                 705\n",
       "Bridge/Car Tunnel                                                            669\n",
       "Telephone/Telegraph                                                          608\n",
       "International NGO                                                            579\n",
       "Gas                                                                          576\n",
       "Refugee (including Camps/IDP/Asylum Seekers)                                 565\n",
       "Bus Station/Stop                                                             539\n",
       "Airport                                                                      514\n",
       "Procession/Gathering (funeral, wedding, birthday, religious)                 510\n",
       "Other Personnel                                                              464\n",
       "Alleged Informant                                                            462\n",
       "Television Journalist/Staff/Facility                                         459\n",
       "Mining                                                                       438\n",
       "Head of State                                                                430\n",
       "Aircraft (not at an airport)                                                 417\n",
       "Farmer                                                                       411\n",
       "Airline Officer/Personnel                                                    399\n",
       "Prison/Jail                                                                  367\n",
       "Affiliated Institution                                                       359\n",
       "Party Office/Facility                                                        343\n",
       "Protester                                                                    331\n",
       "Domestic NGO                                                                 297\n",
       "Student                                                                      283\n",
       "Memorial/Cemetery/Monument                                                   256\n",
       "Military Recruiting Station/Academy                                          255\n",
       "Highway/Road/Toll/Traffic Signal                                             247\n",
       "Tourist                                                                      246\n",
       "Water Supply                                                                 245\n",
       "Clinics                                                                      244\n",
       "Military Aircraft                                                            197\n",
       "Museum/Cultural Center/Cultural House                                        151\n",
       "Commercial Maritime                                                          150\n",
       "Private Security Company/Firm                                                149\n",
       "Subway                                                                       140\n",
       "Radio                                                                        119\n",
       "Other (including online news agencies)                                       117\n",
       "Taxi/Rickshaw                                                                115\n",
       "Rally                                                                        113\n",
       "Civilian Maritime                                                             97\n",
       "Tour Bus/Van                                                                  92\n",
       "Legal Services                                                                88\n",
       "Television                                                                    78\n",
       "Food Supply                                                                   72\n",
       "Military Maritime                                                             63\n",
       "Other Facility                                                                63\n",
       "Port                                                                          62\n",
       "Ambulance                                                                     51\n",
       "Non-combatant Personnel                                                       41\n",
       "Demilitarized Zone (including Green Zone)                                     39\n",
       "Tourism Travel Agency                                                         38\n",
       "Military Weaponry                                                             35\n",
       "Royalty                                                                       34\n",
       "Multiple Telecommunication Targets                                            31\n",
       "Fire Fighter/Truck                                                            27\n",
       "Oil Tanker                                                                    19\n",
       "Personnel                                                                     19\n",
       "Internet Infrastructure                                                       12\n",
       "Name: targsubtype1_txt, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#shows count of target type.\n",
    "df2a['targsubtype1_txt'].value_counts()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x1440 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#bargraph to show count of target type.\n",
    "f, ax = plt.subplots(figsize=(9, 20)) \n",
    "sns.barplot( y = df2a['targsubtype1_txt'].value_counts().index,\n",
    "            x = df2a['targsubtype1_txt'].value_counts().values,\n",
    "                palette=\"GnBu_d\")\n",
    "ax.set_ylabel('')\n",
    "ax.set_title('Different modes used to assume responsibility of the attacks by Terrorists' );"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the most target type assasined are Unnamed Civilian/Unspecified. Since, this data is unspecified, the second target type most assasinated are Police Security Forces/Officers with a death toll of 11178."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Most active terrorist groupâ€™s activity across the years, weapon used and kills caused by it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>gname</th>\n",
       "      <th>weapsubtype1_txt</th>\n",
       "      <th>nkill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>197000000001</td>\n",
       "      <td>MANO-D</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197000000002</td>\n",
       "      <td>23rd of September Communist League</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>197001000001</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>197001000002</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Unknown Explosive Type</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>197001000003</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>201712310022</td>\n",
       "      <td>Al-Shabaab</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>Muslim extremists</td>\n",
       "      <td>Projectile (rockets, mortars, RPGs, etc.)</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>Bangsamoro Islamic Freedom Movement (BIFM)</td>\n",
       "      <td>Arson/Fire</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181689</td>\n",
       "      <td>201712310031</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Grenade</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181690</td>\n",
       "      <td>201712310032</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>Unknown Explosive Type</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>181691 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid                                       gname  \\\n",
       "0       197000000001                                      MANO-D   \n",
       "1       197000000002          23rd of September Communist League   \n",
       "2       197001000001                                     Unknown   \n",
       "3       197001000002                                     Unknown   \n",
       "4       197001000003                                     Unknown   \n",
       "...              ...                                         ...   \n",
       "181686  201712310022                                  Al-Shabaab   \n",
       "181687  201712310029                           Muslim extremists   \n",
       "181688  201712310030  Bangsamoro Islamic Freedom Movement (BIFM)   \n",
       "181689  201712310031                                     Unknown   \n",
       "181690  201712310032                                     Unknown   \n",
       "\n",
       "                                 weapsubtype1_txt  nkill  \n",
       "0                                             NaN    1.0  \n",
       "1                                             NaN    0.0  \n",
       "2                                             NaN    1.0  \n",
       "3                          Unknown Explosive Type    NaN  \n",
       "4                                             NaN    NaN  \n",
       "...                                           ...    ...  \n",
       "181686                           Unknown Gun Type    1.0  \n",
       "181687  Projectile (rockets, mortars, RPGs, etc.)    2.0  \n",
       "181688                                 Arson/Fire    0.0  \n",
       "181689                                    Grenade    0.0  \n",
       "181690                     Unknown Explosive Type    0.0  \n",
       "\n",
       "[181691 rows x 4 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#We filter out the columns which we need to analyse and answer this question.\n",
    "\n",
    "df3 = df.filter(['eventid','gname','weapsubtype1_txt','nkill'], axis=1)\n",
    "df3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since, the solution mostly relies on gname, weapon used and kills, i.e. gname, weapsubtype1_txt and kills. We will check if these three columns have any NaN or Null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "eventid                 0\n",
       "gname                   0\n",
       "weapsubtype1_txt    20768\n",
       "nkill               10313\n",
       "dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unknown                                              82782\n",
       "Taliban                                               7478\n",
       "Islamic State of Iraq and the Levant (ISIL)           5613\n",
       "Shining Path (SL)                                     4555\n",
       "Farabundo Marti National Liberation Front (FMLN)      3351\n",
       "                                                     ...  \n",
       "Omar Torrijos Commando for Latin American Dignity        1\n",
       "Arab Struggle                                            1\n",
       "Argentine Youths for Sovereignty                         1\n",
       "Ariska Brodraskapet (Aryan Brotherhood)                  1\n",
       "Knights Templar (Caballeros Templarios)                  1\n",
       "Name: gname, Length: 3537, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3['gname'].value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we can see there are 82782 unknown terrorist wings, Since this data ambiguous and there's a poisbility that these activities might have been performed by all different groups. So, it doesn't do justice to the known data. We will hence forth remove all the \"unknown\" entries from our dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>gname</th>\n",
       "      <th>weapsubtype1_txt</th>\n",
       "      <th>nkill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>197000000001</td>\n",
       "      <td>MANO-D</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197000000002</td>\n",
       "      <td>23rd of September Communist League</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>197001010002</td>\n",
       "      <td>Black Nationalists</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>197001020001</td>\n",
       "      <td>Tupamaros (Uruguay)</td>\n",
       "      <td>Automatic or Semi-Automatic Rifle</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>197001020003</td>\n",
       "      <td>New Year's Gang</td>\n",
       "      <td>Molotov Cocktail/Petrol Bomb</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181683</td>\n",
       "      <td>201712310018</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181684</td>\n",
       "      <td>201712310019</td>\n",
       "      <td>Zeliangrong United Front</td>\n",
       "      <td>Automatic or Semi-Automatic Rifle</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>201712310022</td>\n",
       "      <td>Al-Shabaab</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>Muslim extremists</td>\n",
       "      <td>Projectile (rockets, mortars, RPGs, etc.)</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>Bangsamoro Islamic Freedom Movement (BIFM)</td>\n",
       "      <td>Arson/Fire</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>98909 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid                                       gname  \\\n",
       "0       197000000001                                      MANO-D   \n",
       "1       197000000002          23rd of September Communist League   \n",
       "5       197001010002                          Black Nationalists   \n",
       "6       197001020001                         Tupamaros (Uruguay)   \n",
       "8       197001020003                             New Year's Gang   \n",
       "...              ...                                         ...   \n",
       "181683  201712310018                                     Taliban   \n",
       "181684  201712310019                    Zeliangrong United Front   \n",
       "181686  201712310022                                  Al-Shabaab   \n",
       "181687  201712310029                           Muslim extremists   \n",
       "181688  201712310030  Bangsamoro Islamic Freedom Movement (BIFM)   \n",
       "\n",
       "                                 weapsubtype1_txt  nkill  \n",
       "0                                             NaN    1.0  \n",
       "1                                             NaN    0.0  \n",
       "5                                Unknown Gun Type    0.0  \n",
       "6               Automatic or Semi-Automatic Rifle    0.0  \n",
       "8                    Molotov Cocktail/Petrol Bomb    0.0  \n",
       "...                                           ...    ...  \n",
       "181683                           Unknown Gun Type    6.0  \n",
       "181684          Automatic or Semi-Automatic Rifle    0.0  \n",
       "181686                           Unknown Gun Type    1.0  \n",
       "181687  Projectile (rockets, mortars, RPGs, etc.)    2.0  \n",
       "181688                                 Arson/Fire    0.0  \n",
       "\n",
       "[98909 rows x 4 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing all \"unknown\" gang names from the dataframe\n",
    "df3= df3[df3.gname != \"Unknown\"]\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "eventid                 0\n",
       "gname                   0\n",
       "weapsubtype1_txt    14389\n",
       "nkill                7068\n",
       "dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "#removing NaN values\n",
    "df3a=df3.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>gname</th>\n",
       "      <th>weapsubtype1_txt</th>\n",
       "      <th>nkill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>197001010002</td>\n",
       "      <td>Black Nationalists</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>197001020001</td>\n",
       "      <td>Tupamaros (Uruguay)</td>\n",
       "      <td>Automatic or Semi-Automatic Rifle</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>197001020003</td>\n",
       "      <td>New Year's Gang</td>\n",
       "      <td>Molotov Cocktail/Petrol Bomb</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>197001030001</td>\n",
       "      <td>New Year's Gang</td>\n",
       "      <td>Gasoline or Alcohol</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>197001050001</td>\n",
       "      <td>Weather Underground, Weathermen</td>\n",
       "      <td>Unknown Explosive Type</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181683</td>\n",
       "      <td>201712310018</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181684</td>\n",
       "      <td>201712310019</td>\n",
       "      <td>Zeliangrong United Front</td>\n",
       "      <td>Automatic or Semi-Automatic Rifle</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>201712310022</td>\n",
       "      <td>Al-Shabaab</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>Muslim extremists</td>\n",
       "      <td>Projectile (rockets, mortars, RPGs, etc.)</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>Bangsamoro Islamic Freedom Movement (BIFM)</td>\n",
       "      <td>Arson/Fire</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>79420 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid                                       gname  \\\n",
       "5       197001010002                          Black Nationalists   \n",
       "6       197001020001                         Tupamaros (Uruguay)   \n",
       "8       197001020003                             New Year's Gang   \n",
       "9       197001030001                             New Year's Gang   \n",
       "10      197001050001             Weather Underground, Weathermen   \n",
       "...              ...                                         ...   \n",
       "181683  201712310018                                     Taliban   \n",
       "181684  201712310019                    Zeliangrong United Front   \n",
       "181686  201712310022                                  Al-Shabaab   \n",
       "181687  201712310029                           Muslim extremists   \n",
       "181688  201712310030  Bangsamoro Islamic Freedom Movement (BIFM)   \n",
       "\n",
       "                                 weapsubtype1_txt  nkill  \n",
       "5                                Unknown Gun Type    0.0  \n",
       "6               Automatic or Semi-Automatic Rifle    0.0  \n",
       "8                    Molotov Cocktail/Petrol Bomb    0.0  \n",
       "9                             Gasoline or Alcohol    0.0  \n",
       "10                         Unknown Explosive Type    0.0  \n",
       "...                                           ...    ...  \n",
       "181683                           Unknown Gun Type    6.0  \n",
       "181684          Automatic or Semi-Automatic Rifle    0.0  \n",
       "181686                           Unknown Gun Type    1.0  \n",
       "181687  Projectile (rockets, mortars, RPGs, etc.)    2.0  \n",
       "181688                                 Arson/Fire    0.0  \n",
       "\n",
       "[79420 rows x 4 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Taliban                                                                                         6006\n",
       "Islamic State of Iraq and the Levant (ISIL)                                                     4282\n",
       "Shining Path (SL)                                                                               3665\n",
       "Farabundo Marti National Liberation Front (FMLN)                                                2396\n",
       "New People's Army (NPA)                                                                         2368\n",
       "                                                                                                ... \n",
       "Wild Freedom                                                                                       1\n",
       "Unification Army Sons Brigade                                                                      1\n",
       "Haji Fateh                                                                                         1\n",
       "Fatherland and Liberty Nationalist Front (FNPL - Frente Nacionalista Patria y Libertad FNPL)       1\n",
       "Moroccan extremists                                                                                1\n",
       "Name: gname, Length: 2967, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3a['gname'].value_counts()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With this we can see that out of the cleansed 79420 entries, Taliban has most number of attacks followed by Islamic State of Iraq and the Levant (ISIL).\n",
    "\n",
    "Now, we will find number of kills associated with Taliban."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>gname</th>\n",
       "      <th>weapsubtype1_txt</th>\n",
       "      <th>nkill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>60014</td>\n",
       "      <td>199508030006</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Unknown Explosive Type</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>60462</td>\n",
       "      <td>199509210008</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Unknown Explosive Type</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>60786</td>\n",
       "      <td>199510250011</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Projectile (rockets, mortars, RPGs, etc.)</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>71682</td>\n",
       "      <td>200101070007</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>73116</td>\n",
       "      <td>200109100001</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Suicide (carried bodily by human being)</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181567</td>\n",
       "      <td>201712270009</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Landmine</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181570</td>\n",
       "      <td>201712270012</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Vehicle</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181574</td>\n",
       "      <td>201712270017</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Landmine</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181676</td>\n",
       "      <td>201712310009</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Remote Trigger</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181683</td>\n",
       "      <td>201712310018</td>\n",
       "      <td>Taliban</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6006 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid    gname                           weapsubtype1_txt  \\\n",
       "60014   199508030006  Taliban                     Unknown Explosive Type   \n",
       "60462   199509210008  Taliban                     Unknown Explosive Type   \n",
       "60786   199510250011  Taliban  Projectile (rockets, mortars, RPGs, etc.)   \n",
       "71682   200101070007  Taliban                           Unknown Gun Type   \n",
       "73116   200109100001  Taliban    Suicide (carried bodily by human being)   \n",
       "...              ...      ...                                        ...   \n",
       "181567  201712270009  Taliban                                   Landmine   \n",
       "181570  201712270012  Taliban                                    Vehicle   \n",
       "181574  201712270017  Taliban                                   Landmine   \n",
       "181676  201712310009  Taliban                             Remote Trigger   \n",
       "181683  201712310018  Taliban                           Unknown Gun Type   \n",
       "\n",
       "        nkill  \n",
       "60014     0.0  \n",
       "60462     0.0  \n",
       "60786     0.0  \n",
       "71682   150.0  \n",
       "73116     3.0  \n",
       "...       ...  \n",
       "181567    4.0  \n",
       "181570    1.0  \n",
       "181574    6.0  \n",
       "181676    5.0  \n",
       "181683    6.0  \n",
       "\n",
       "[6006 rows x 4 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Using Loc function to keep only data related to Taliban.\n",
    "df3Tal=df3a.loc[df3a['gname'].isin(['Taliban'])]\n",
    "df3Tal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3TalKill = df3Tal.filter(['weapsubtype1_txt','nkill'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weapsubtype1_txt</th>\n",
       "      <th>nkill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>12054.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Vehicle</td>\n",
       "      <td>3015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Suicide (carried bodily by human being)</td>\n",
       "      <td>2560.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Landmine</td>\n",
       "      <td>1821.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Unknown Explosive Type</td>\n",
       "      <td>1785.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Projectile (rockets, mortars, RPGs, etc.)</td>\n",
       "      <td>1390.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Other Explosive Type</td>\n",
       "      <td>470.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Remote Trigger</td>\n",
       "      <td>379.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Automatic or Semi-Automatic Rifle</td>\n",
       "      <td>373.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Arson/Fire</td>\n",
       "      <td>223.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Knife or Other Sharp Object</td>\n",
       "      <td>147.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Pressure Trigger</td>\n",
       "      <td>96.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Grenade</td>\n",
       "      <td>85.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Sticky Bomb</td>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>Handgun</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>15</td>\n",
       "      <td>Rope or Other Strangling Device</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>16</td>\n",
       "      <td>Poisoning</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>17</td>\n",
       "      <td>Rifle/Shotgun (non-automatic)</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>18</td>\n",
       "      <td>Other Gun Type</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>19</td>\n",
       "      <td>Time Fuse</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>20</td>\n",
       "      <td>Gasoline or Alcohol</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>21</td>\n",
       "      <td>Blunt Object</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>Hands, Feet, Fists</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>23</td>\n",
       "      <td>Unknown Weapon Type</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             weapsubtype1_txt    nkill\n",
       "0                            Unknown Gun Type  12054.0\n",
       "1                                     Vehicle   3015.0\n",
       "2     Suicide (carried bodily by human being)   2560.0\n",
       "3                                    Landmine   1821.0\n",
       "4                      Unknown Explosive Type   1785.0\n",
       "5   Projectile (rockets, mortars, RPGs, etc.)   1390.0\n",
       "6                        Other Explosive Type    470.0\n",
       "7                              Remote Trigger    379.0\n",
       "8           Automatic or Semi-Automatic Rifle    373.0\n",
       "9                                  Arson/Fire    223.0\n",
       "10                Knife or Other Sharp Object    147.0\n",
       "11                           Pressure Trigger     96.0\n",
       "12                                    Grenade     85.0\n",
       "13                                Sticky Bomb     62.0\n",
       "14                                    Handgun     58.0\n",
       "15            Rope or Other Strangling Device     49.0\n",
       "16                                  Poisoning     12.0\n",
       "17              Rifle/Shotgun (non-automatic)     11.0\n",
       "18                             Other Gun Type      9.0\n",
       "19                                  Time Fuse      3.0\n",
       "20                        Gasoline or Alcohol      2.0\n",
       "21                               Blunt Object      2.0\n",
       "22                         Hands, Feet, Fists      1.0\n",
       "23                        Unknown Weapon Type      0.0"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Grouping the data with respect to weapons used to kill.\n",
    "df3TK=df3TalKill.groupby('weapsubtype1_txt').sum().sort_values('nkill',ascending=False).reset_index()\n",
    "df3TK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24607.0"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Total number of kills by Taliban\n",
    "df3TK.nkill.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that Taliban has killed 24607 people in these many years."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since, there are 23 entries, a pie-chart with so many entries will not come out well. Hence, we will plot the same data with the enrties which have killed 1000+ people and treating rest all as others.\n",
    "\n",
    "To get sum of all other values,"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1982.0"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#slicing data to find sum of others data\n",
    "sumOthers = df3TK.iloc[6:24]\n",
    "sumOthers.nkill.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>weapsubtype1_txt</th>\n",
       "      <th>nkill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Unknown Gun Type</td>\n",
       "      <td>12054.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Vehicle</td>\n",
       "      <td>3015.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Suicide (carried bodily by human being)</td>\n",
       "      <td>2560.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Landmine</td>\n",
       "      <td>1821.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Unknown Explosive Type</td>\n",
       "      <td>1785.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Projectile (rockets, mortars, RPGs, etc.)</td>\n",
       "      <td>1390.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Others</td>\n",
       "      <td>1982.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            weapsubtype1_txt    nkill\n",
       "0                           Unknown Gun Type  12054.0\n",
       "1                                    Vehicle   3015.0\n",
       "2    Suicide (carried bodily by human being)   2560.0\n",
       "3                                   Landmine   1821.0\n",
       "4                     Unknown Explosive Type   1785.0\n",
       "5  Projectile (rockets, mortars, RPGs, etc.)   1390.0\n",
       "6                                     Others   1982.0"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Adding a row others before creating the graph\n",
    "forGraph = df3TK.iloc[0:6]\n",
    "forGraph = forGraph.append(pd.Series(['Others', 1982], index=forGraph.columns ), ignore_index=True)\n",
    "forGraph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "colors = [\"#FFFF00\", \"#1919A6\", \"#DEA185\", \"#FD0000\", \"#9C27B0\", \"#009688\", \"#FF5722\", \"#3F51B5\", \"#9E9E9E\"]\n",
    "\n",
    "plt.pie(\n",
    "    # using data total)arrests\n",
    "    forGraph['nkill'],\n",
    "    # with the labels being officer names\n",
    "    labels=forGraph['weapsubtype1_txt'],\n",
    "    # with no shadows\n",
    "    shadow=True,\n",
    "    # with colors\n",
    "    colors=colors,\n",
    "    # with one slide exploded out\n",
    "    explode=(0.15, 0, 0, 0,0, 0, 0),\n",
    "    # with the start angle at 90%\n",
    "    startangle=10,\n",
    "    # with the percent listed as a fraction\n",
    "    autopct='%1.1f%%',\n",
    "    )\n",
    "\n",
    "\n",
    "# View the plot\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 4.  Economical loss  of each decade and it's comparison based on criticality of the attack."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We filter out the columns which we need to analyse and answer this question.\n",
    "\n",
    "df4 = df.filter(['eventid','iyear','country_txt','propvalue','crit1'], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>iyear</th>\n",
       "      <th>country_txt</th>\n",
       "      <th>propvalue</th>\n",
       "      <th>crit1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>197000000001</td>\n",
       "      <td>1970</td>\n",
       "      <td>Dominican Republic</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197000000002</td>\n",
       "      <td>1970</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>197001000001</td>\n",
       "      <td>1970</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>197001000002</td>\n",
       "      <td>1970</td>\n",
       "      <td>Greece</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>197001000003</td>\n",
       "      <td>1970</td>\n",
       "      <td>Japan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>201712310022</td>\n",
       "      <td>2017</td>\n",
       "      <td>Somalia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>2017</td>\n",
       "      <td>Syria</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>2017</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181689</td>\n",
       "      <td>201712310031</td>\n",
       "      <td>2017</td>\n",
       "      <td>India</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181690</td>\n",
       "      <td>201712310032</td>\n",
       "      <td>2017</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>181691 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid  iyear         country_txt  propvalue  crit1\n",
       "0       197000000001   1970  Dominican Republic        NaN      1\n",
       "1       197000000002   1970              Mexico        NaN      1\n",
       "2       197001000001   1970         Philippines        NaN      1\n",
       "3       197001000002   1970              Greece        NaN      1\n",
       "4       197001000003   1970               Japan        NaN      1\n",
       "...              ...    ...                 ...        ...    ...\n",
       "181686  201712310022   2017             Somalia        NaN      1\n",
       "181687  201712310029   2017               Syria      -99.0      1\n",
       "181688  201712310030   2017         Philippines      -99.0      1\n",
       "181689  201712310031   2017               India        NaN      1\n",
       "181690  201712310032   2017         Philippines        NaN      1\n",
       "\n",
       "[181691 rows x 5 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "eventid             0\n",
       "iyear               0\n",
       "country_txt         0\n",
       "propvalue      142702\n",
       "crit1               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#dropping NaN values\n",
    "df4a = df4.dropna()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "creating column decade to find decades for each entry."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "    decade = []\n",
    "    for row in df4a['iyear']:\n",
    "        if row < 1980:    decade.append('1970s')\n",
    "        elif row < 1990:  decade.append('1980s')\n",
    "        elif row < 2000:  decade.append('1990s')\n",
    "        elif row < 2010:  decade.append('2000s')\n",
    "        else:    decade.append('2010s')\n",
    "    # Create a column from the list\n",
    "    df4a['decade'] = decade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>iyear</th>\n",
       "      <th>country_txt</th>\n",
       "      <th>propvalue</th>\n",
       "      <th>crit1</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>197001020002</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>22500.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>197001020003</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>197001050001</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>197001060001</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>305.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>197001090002</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181681</td>\n",
       "      <td>201712310016</td>\n",
       "      <td>2017</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181682</td>\n",
       "      <td>201712310017</td>\n",
       "      <td>2017</td>\n",
       "      <td>Italy</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181685</td>\n",
       "      <td>201712310020</td>\n",
       "      <td>2017</td>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>2017</td>\n",
       "      <td>Syria</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>2017</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>38989 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid  iyear    country_txt  propvalue  crit1 decade\n",
       "7       197001020002   1970  United States    22500.0      1  1970s\n",
       "8       197001020003   1970  United States    60000.0      1  1970s\n",
       "10      197001050001   1970  United States        0.0      1  1970s\n",
       "11      197001060001   1970  United States      305.0      1  1970s\n",
       "14      197001090002   1970  United States  2000000.0      1  1970s\n",
       "...              ...    ...            ...        ...    ...    ...\n",
       "181681  201712310016   2017    Philippines      -99.0      1  2010s\n",
       "181682  201712310017   2017          Italy      -99.0      1  2010s\n",
       "181685  201712310020   2017    Afghanistan      -99.0      1  2010s\n",
       "181687  201712310029   2017          Syria      -99.0      1  2010s\n",
       "181688  201712310030   2017    Philippines      -99.0      1  2010s\n",
       "\n",
       "[38989 rows x 6 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-99.0         28613\n",
       " 50000.0       1185\n",
       " 10000.0        805\n",
       " 20000.0        756\n",
       " 5000.0         578\n",
       "              ...  \n",
       " 1100000.0        1\n",
       " 37500.0          1\n",
       " 750.0            1\n",
       " 19620.0          1\n",
       " 619075.0         1\n",
       "Name: propvalue, Length: 659, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4a['propvalue'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>iyear</th>\n",
       "      <th>country_txt</th>\n",
       "      <th>propvalue</th>\n",
       "      <th>crit1</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>197001020002</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>22500.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>197001020003</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>60000.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>197001050001</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>197001060001</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>305.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>197001090002</td>\n",
       "      <td>1970</td>\n",
       "      <td>United States</td>\n",
       "      <td>2000000.00</td>\n",
       "      <td>1</td>\n",
       "      <td>1970s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>179865</td>\n",
       "      <td>201710210003</td>\n",
       "      <td>2017</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>172260.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>180779</td>\n",
       "      <td>201711260021</td>\n",
       "      <td>2017</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>3854.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>180834</td>\n",
       "      <td>201711270038</td>\n",
       "      <td>2017</td>\n",
       "      <td>Malawi</td>\n",
       "      <td>545.10</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181029</td>\n",
       "      <td>201712040004</td>\n",
       "      <td>2017</td>\n",
       "      <td>India</td>\n",
       "      <td>1490.33</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181152</td>\n",
       "      <td>201712080014</td>\n",
       "      <td>2017</td>\n",
       "      <td>India</td>\n",
       "      <td>461100.00</td>\n",
       "      <td>1</td>\n",
       "      <td>2010s</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10376 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid  iyear    country_txt   propvalue  crit1 decade\n",
       "7       197001020002   1970  United States    22500.00      1  1970s\n",
       "8       197001020003   1970  United States    60000.00      1  1970s\n",
       "10      197001050001   1970  United States        0.00      1  1970s\n",
       "11      197001060001   1970  United States      305.00      1  1970s\n",
       "14      197001090002   1970  United States  2000000.00      1  1970s\n",
       "...              ...    ...            ...         ...    ...    ...\n",
       "179865  201710210003   2017    Philippines   172260.00      1  2010s\n",
       "180779  201711260021   2017    Philippines     3854.00      1  2010s\n",
       "180834  201711270038   2017         Malawi      545.10      1  2010s\n",
       "181029  201712040004   2017          India     1490.33      1  2010s\n",
       "181152  201712080014   2017          India   461100.00      1  2010s\n",
       "\n",
       "[10376 rows x 6 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing garbage values in propvalue where value = -99\n",
    "df4a = df4a[df4a.propvalue != -99]\n",
    "df4a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#countplot to count activities in each decade\n",
    "plt.subplots(figsize=(15,6))\n",
    "sns.countplot('decade',data=df4a,palette='RdYlGn_r',edgecolor=sns.color_palette('dark',7))\n",
    "plt.xticks(rotation=90)\n",
    "plt.title('Number Of Terrorist Activities Each Decade')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Grouping property value loss each decade.\n",
    "df4ab=df4a.groupby('decade').sum().sort_values('propvalue',ascending=False).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "df4tot = df4ab.filter(['decade','propvalue'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decade</th>\n",
       "      <th>propvalue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1990s</td>\n",
       "      <td>5.113051e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1980s</td>\n",
       "      <td>1.615999e+09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2000s</td>\n",
       "      <td>6.401500e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2010s</td>\n",
       "      <td>3.979782e+08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1970s</td>\n",
       "      <td>3.770212e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  decade     propvalue\n",
       "0  1990s  5.113051e+09\n",
       "1  1980s  1.615999e+09\n",
       "2  2000s  6.401500e+08\n",
       "3  2010s  3.979782e+08\n",
       "4  1970s  3.770212e+08"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#shows loss in each decade\n",
    "df4tot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#loss percentage each decade.\n",
    "# Pie chart\n",
    "labels = df4tot['decade']\n",
    "sizes = df4tot['propvalue']\n",
    "#colors\n",
    "colors = ['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0']\n",
    "explode = (0.05,0.05,0.05,0.05,0.05)\n",
    "\n",
    "fig1, ax1 = plt.subplots()\n",
    "ax1.pie(sizes, colors = colors, labels=labels, autopct='%1.1f%%', startangle=90, explode = explode)\n",
    "#draw circle\n",
    "centre_circle = plt.Circle((0,0),0.70,fc='white')\n",
    "fig = plt.gcf()\n",
    "fig.gca().add_artist(centre_circle)  \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, to compare the property damage per decade based on crtiticality of the attack, we are using crti1, which has values 1 for highly critical and 0 for less critical."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10, 10266724.951804938)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#barplot to compare property value loss each decade based on criticality\n",
    "sns.set(style=\"whitegrid\")\n",
    "ax = sns.barplot(x=\"decade\", y=\"propvalue\", hue=\"crit1\", data=df4a)\n",
    "plt.ylim(10,)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Regression to see success of terrorist attack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#We filter out the columns which we need to analyse and answer this question.\n",
    "\n",
    "dfreg = pd.read_csv('globalterrorismdb.csv', engine='python', encoding = \"ISO-8859-1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "df5 = dfreg.filter(['eventid','success','attacktype1_txt','targtype1_txt','nkill'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>eventid</th>\n",
       "      <th>success</th>\n",
       "      <th>attacktype1_txt</th>\n",
       "      <th>targtype1_txt</th>\n",
       "      <th>nkill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>197000000001</td>\n",
       "      <td>1</td>\n",
       "      <td>Assassination</td>\n",
       "      <td>Private Citizens &amp; Property</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>197000000002</td>\n",
       "      <td>1</td>\n",
       "      <td>Hostage Taking (Kidnapping)</td>\n",
       "      <td>Government (Diplomatic)</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>197001000001</td>\n",
       "      <td>1</td>\n",
       "      <td>Assassination</td>\n",
       "      <td>Journalists &amp; Media</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>197001010002</td>\n",
       "      <td>1</td>\n",
       "      <td>Armed Assault</td>\n",
       "      <td>Police</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>197001020001</td>\n",
       "      <td>0</td>\n",
       "      <td>Assassination</td>\n",
       "      <td>Police</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>201712310022</td>\n",
       "      <td>1</td>\n",
       "      <td>Armed Assault</td>\n",
       "      <td>Military</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>201712310029</td>\n",
       "      <td>1</td>\n",
       "      <td>Bombing/Explosion</td>\n",
       "      <td>Military</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>201712310030</td>\n",
       "      <td>1</td>\n",
       "      <td>Facility/Infrastructure Attack</td>\n",
       "      <td>Private Citizens &amp; Property</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181689</td>\n",
       "      <td>201712310031</td>\n",
       "      <td>0</td>\n",
       "      <td>Bombing/Explosion</td>\n",
       "      <td>Government (General)</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181690</td>\n",
       "      <td>201712310032</td>\n",
       "      <td>0</td>\n",
       "      <td>Bombing/Explosion</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>171378 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             eventid  success                 attacktype1_txt  \\\n",
       "0       197000000001        1                   Assassination   \n",
       "1       197000000002        1     Hostage Taking (Kidnapping)   \n",
       "2       197001000001        1                   Assassination   \n",
       "5       197001010002        1                   Armed Assault   \n",
       "6       197001020001        0                   Assassination   \n",
       "...              ...      ...                             ...   \n",
       "181686  201712310022        1                   Armed Assault   \n",
       "181687  201712310029        1               Bombing/Explosion   \n",
       "181688  201712310030        1  Facility/Infrastructure Attack   \n",
       "181689  201712310031        0               Bombing/Explosion   \n",
       "181690  201712310032        0               Bombing/Explosion   \n",
       "\n",
       "                      targtype1_txt  nkill  \n",
       "0       Private Citizens & Property    1.0  \n",
       "1           Government (Diplomatic)    0.0  \n",
       "2               Journalists & Media    1.0  \n",
       "5                            Police    0.0  \n",
       "6                            Police    0.0  \n",
       "...                             ...    ...  \n",
       "181686                     Military    1.0  \n",
       "181687                     Military    2.0  \n",
       "181688  Private Citizens & Property    0.0  \n",
       "181689         Government (General)    0.0  \n",
       "181690                      Unknown    0.0  \n",
       "\n",
       "[171378 rows x 5 columns]"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df5=df5.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "#creating dummies for regression\n",
    "df5reg = pd.get_dummies(df5[['success', 'attacktype1_txt', 'targtype1_txt','nkill']], drop_first = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>success</th>\n",
       "      <th>nkill</th>\n",
       "      <th>attacktype1_txt_Assassination</th>\n",
       "      <th>attacktype1_txt_Bombing/Explosion</th>\n",
       "      <th>attacktype1_txt_Facility/Infrastructure Attack</th>\n",
       "      <th>attacktype1_txt_Hijacking</th>\n",
       "      <th>attacktype1_txt_Hostage Taking (Barricade Incident)</th>\n",
       "      <th>attacktype1_txt_Hostage Taking (Kidnapping)</th>\n",
       "      <th>attacktype1_txt_Unarmed Assault</th>\n",
       "      <th>attacktype1_txt_Unknown</th>\n",
       "      <th>...</th>\n",
       "      <th>targtype1_txt_Police</th>\n",
       "      <th>targtype1_txt_Private Citizens &amp; Property</th>\n",
       "      <th>targtype1_txt_Religious Figures/Institutions</th>\n",
       "      <th>targtype1_txt_Telecommunication</th>\n",
       "      <th>targtype1_txt_Terrorists/Non-State Militia</th>\n",
       "      <th>targtype1_txt_Tourists</th>\n",
       "      <th>targtype1_txt_Transportation</th>\n",
       "      <th>targtype1_txt_Unknown</th>\n",
       "      <th>targtype1_txt_Utilities</th>\n",
       "      <th>targtype1_txt_Violent Political Party</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181686</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181689</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181690</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>171378 rows Ã— 31 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        success  nkill  attacktype1_txt_Assassination  \\\n",
       "0             1    1.0                              1   \n",
       "1             1    0.0                              0   \n",
       "2             1    1.0                              1   \n",
       "5             1    0.0                              0   \n",
       "6             0    0.0                              1   \n",
       "...         ...    ...                            ...   \n",
       "181686        1    1.0                              0   \n",
       "181687        1    2.0                              0   \n",
       "181688        1    0.0                              0   \n",
       "181689        0    0.0                              0   \n",
       "181690        0    0.0                              0   \n",
       "\n",
       "        attacktype1_txt_Bombing/Explosion  \\\n",
       "0                                       0   \n",
       "1                                       0   \n",
       "2                                       0   \n",
       "5                                       0   \n",
       "6                                       0   \n",
       "...                                   ...   \n",
       "181686                                  0   \n",
       "181687                                  1   \n",
       "181688                                  0   \n",
       "181689                                  1   \n",
       "181690                                  1   \n",
       "\n",
       "        attacktype1_txt_Facility/Infrastructure Attack  \\\n",
       "0                                                    0   \n",
       "1                                                    0   \n",
       "2                                                    0   \n",
       "5                                                    0   \n",
       "6                                                    0   \n",
       "...                                                ...   \n",
       "181686                                               0   \n",
       "181687                                               0   \n",
       "181688                                               1   \n",
       "181689                                               0   \n",
       "181690                                               0   \n",
       "\n",
       "        attacktype1_txt_Hijacking  \\\n",
       "0                               0   \n",
       "1                               0   \n",
       "2                               0   \n",
       "5                               0   \n",
       "6                               0   \n",
       "...                           ...   \n",
       "181686                          0   \n",
       "181687                          0   \n",
       "181688                          0   \n",
       "181689                          0   \n",
       "181690                          0   \n",
       "\n",
       "        attacktype1_txt_Hostage Taking (Barricade Incident)  \\\n",
       "0                                                       0     \n",
       "1                                                       0     \n",
       "2                                                       0     \n",
       "5                                                       0     \n",
       "6                                                       0     \n",
       "...                                                   ...     \n",
       "181686                                                  0     \n",
       "181687                                                  0     \n",
       "181688                                                  0     \n",
       "181689                                                  0     \n",
       "181690                                                  0     \n",
       "\n",
       "        attacktype1_txt_Hostage Taking (Kidnapping)  \\\n",
       "0                                                 0   \n",
       "1                                                 1   \n",
       "2                                                 0   \n",
       "5                                                 0   \n",
       "6                                                 0   \n",
       "...                                             ...   \n",
       "181686                                            0   \n",
       "181687                                            0   \n",
       "181688                                            0   \n",
       "181689                                            0   \n",
       "181690                                            0   \n",
       "\n",
       "        attacktype1_txt_Unarmed Assault  attacktype1_txt_Unknown  ...  \\\n",
       "0                                     0                        0  ...   \n",
       "1                                     0                        0  ...   \n",
       "2                                     0                        0  ...   \n",
       "5                                     0                        0  ...   \n",
       "6                                     0                        0  ...   \n",
       "...                                 ...                      ...  ...   \n",
       "181686                                0                        0  ...   \n",
       "181687                                0                        0  ...   \n",
       "181688                                0                        0  ...   \n",
       "181689                                0                        0  ...   \n",
       "181690                                0                        0  ...   \n",
       "\n",
       "        targtype1_txt_Police  targtype1_txt_Private Citizens & Property  \\\n",
       "0                          0                                          1   \n",
       "1                          0                                          0   \n",
       "2                          0                                          0   \n",
       "5                          1                                          0   \n",
       "6                          1                                          0   \n",
       "...                      ...                                        ...   \n",
       "181686                     0                                          0   \n",
       "181687                     0                                          0   \n",
       "181688                     0                                          1   \n",
       "181689                     0                                          0   \n",
       "181690                     0                                          0   \n",
       "\n",
       "        targtype1_txt_Religious Figures/Institutions  \\\n",
       "0                                                  0   \n",
       "1                                                  0   \n",
       "2                                                  0   \n",
       "5                                                  0   \n",
       "6                                                  0   \n",
       "...                                              ...   \n",
       "181686                                             0   \n",
       "181687                                             0   \n",
       "181688                                             0   \n",
       "181689                                             0   \n",
       "181690                                             0   \n",
       "\n",
       "        targtype1_txt_Telecommunication  \\\n",
       "0                                     0   \n",
       "1                                     0   \n",
       "2                                     0   \n",
       "5                                     0   \n",
       "6                                     0   \n",
       "...                                 ...   \n",
       "181686                                0   \n",
       "181687                                0   \n",
       "181688                                0   \n",
       "181689                                0   \n",
       "181690                                0   \n",
       "\n",
       "        targtype1_txt_Terrorists/Non-State Militia  targtype1_txt_Tourists  \\\n",
       "0                                                0                       0   \n",
       "1                                                0                       0   \n",
       "2                                                0                       0   \n",
       "5                                                0                       0   \n",
       "6                                                0                       0   \n",
       "...                                            ...                     ...   \n",
       "181686                                           0                       0   \n",
       "181687                                           0                       0   \n",
       "181688                                           0                       0   \n",
       "181689                                           0                       0   \n",
       "181690                                           0                       0   \n",
       "\n",
       "        targtype1_txt_Transportation  targtype1_txt_Unknown  \\\n",
       "0                                  0                      0   \n",
       "1                                  0                      0   \n",
       "2                                  0                      0   \n",
       "5                                  0                      0   \n",
       "6                                  0                      0   \n",
       "...                              ...                    ...   \n",
       "181686                             0                      0   \n",
       "181687                             0                      0   \n",
       "181688                             0                      0   \n",
       "181689                             0                      0   \n",
       "181690                             0                      1   \n",
       "\n",
       "        targtype1_txt_Utilities  targtype1_txt_Violent Political Party  \n",
       "0                             0                                      0  \n",
       "1                             0                                      0  \n",
       "2                             0                                      0  \n",
       "5                             0                                      0  \n",
       "6                             0                                      0  \n",
       "...                         ...                                    ...  \n",
       "181686                        0                                      0  \n",
       "181687                        0                                      0  \n",
       "181688                        0                                      0  \n",
       "181689                        0                                      0  \n",
       "181690                        0                                      0  \n",
       "\n",
       "[171378 rows x 31 columns]"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5reg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#using logistic regression\n",
    "from sklearn import linear_model\n",
    "\n",
    "reg = linear_model.LogisticRegression()\n",
    "\n",
    "results = reg.fit(X = df5reg, y = df5['success'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1.60444307e+01  2.56312199e-02 -5.47419775e-01 -1.65202242e-01\n",
      "   9.00426737e-02 -2.52967612e-02  6.74829442e-02  2.38951968e-01\n",
      "  -5.28813278e-02 -3.56582739e-01 -5.60200220e-02  1.74765577e-01\n",
      "   5.29169535e-02 -6.61458940e-04 -8.77103536e-02 -5.68759098e-02\n",
      "   3.61890629e-02 -3.22997422e-03  8.10560301e-03  3.65712486e-02\n",
      "  -2.91871323e-04  1.13669413e-01  2.47970690e-01  7.88227471e-02\n",
      "   3.50623640e-02  9.86720542e-02  1.02275136e-02  1.04504387e-02\n",
      "  -8.42707507e-01  1.75433023e-01 -1.13907611e-02]]\n"
     ]
    }
   ],
   "source": [
    "#coeficient results\n",
    "print(results.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-6.8728492]\n"
     ]
    }
   ],
   "source": [
    "print(results.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>coef</th>\n",
       "      <th>odd_ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>intercep</td>\n",
       "      <td>-6.872849</td>\n",
       "      <td>1.035522e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>success</td>\n",
       "      <td>16.044431</td>\n",
       "      <td>9.289829e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>nkill</td>\n",
       "      <td>0.025631</td>\n",
       "      <td>1.025963e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>attacktype1_txt_Assassination</td>\n",
       "      <td>-0.547420</td>\n",
       "      <td>5.784404e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>attacktype1_txt_Bombing/Explosion</td>\n",
       "      <td>-0.165202</td>\n",
       "      <td>8.477222e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>attacktype1_txt_Facility/Infrastructure Attack</td>\n",
       "      <td>0.090043</td>\n",
       "      <td>1.094221e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>attacktype1_txt_Hijacking</td>\n",
       "      <td>-0.025297</td>\n",
       "      <td>9.750205e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>attacktype1_txt_Hostage Taking (Barricade Incident)</td>\n",
       "      <td>0.067483</td>\n",
       "      <td>1.069812e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>attacktype1_txt_Hostage Taking (Kidnapping)</td>\n",
       "      <td>0.238952</td>\n",
       "      <td>1.269918e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>attacktype1_txt_Unarmed Assault</td>\n",
       "      <td>-0.052881</td>\n",
       "      <td>9.484926e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>attacktype1_txt_Unknown</td>\n",
       "      <td>-0.356583</td>\n",
       "      <td>7.000645e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Airports &amp; Aircraft</td>\n",
       "      <td>-0.056020</td>\n",
       "      <td>9.455202e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Business</td>\n",
       "      <td>0.174766</td>\n",
       "      <td>1.190967e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Educational Institution</td>\n",
       "      <td>0.052917</td>\n",
       "      <td>1.054342e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Food or Water Supply</td>\n",
       "      <td>-0.000661</td>\n",
       "      <td>9.993388e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Government (Diplomatic)</td>\n",
       "      <td>-0.087710</td>\n",
       "      <td>9.160262e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Government (General)</td>\n",
       "      <td>-0.056876</td>\n",
       "      <td>9.447113e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Journalists &amp; Media</td>\n",
       "      <td>0.036189</td>\n",
       "      <td>1.036852e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Maritime</td>\n",
       "      <td>-0.003230</td>\n",
       "      <td>9.967752e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Military</td>\n",
       "      <td>0.008106</td>\n",
       "      <td>1.008139e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_NGO</td>\n",
       "      <td>0.036571</td>\n",
       "      <td>1.037248e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Other</td>\n",
       "      <td>-0.000292</td>\n",
       "      <td>9.997082e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Police</td>\n",
       "      <td>0.113669</td>\n",
       "      <td>1.120382e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Private Citizens &amp; Property</td>\n",
       "      <td>0.247971</td>\n",
       "      <td>1.281422e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Religious Figures/Institutions</td>\n",
       "      <td>0.078823</td>\n",
       "      <td>1.082013e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Telecommunication</td>\n",
       "      <td>0.035062</td>\n",
       "      <td>1.035684e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Terrorists/Non-State Militia</td>\n",
       "      <td>0.098672</td>\n",
       "      <td>1.103704e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Tourists</td>\n",
       "      <td>0.010228</td>\n",
       "      <td>1.010280e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Transportation</td>\n",
       "      <td>0.010450</td>\n",
       "      <td>1.010505e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Unknown</td>\n",
       "      <td>-0.842708</td>\n",
       "      <td>4.305432e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Utilities</td>\n",
       "      <td>0.175433</td>\n",
       "      <td>1.191762e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>targtype1_txt_Violent Political Party</td>\n",
       "      <td>-0.011391</td>\n",
       "      <td>9.886739e-01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                         coef     odd_ratio\n",
       "intercep                                            -6.872849  1.035522e-03\n",
       "success                                             16.044431  9.289829e+06\n",
       "nkill                                                0.025631  1.025963e+00\n",
       "attacktype1_txt_Assassination                       -0.547420  5.784404e-01\n",
       "attacktype1_txt_Bombing/Explosion                   -0.165202  8.477222e-01\n",
       "attacktype1_txt_Facility/Infrastructure Attack       0.090043  1.094221e+00\n",
       "attacktype1_txt_Hijacking                           -0.025297  9.750205e-01\n",
       "attacktype1_txt_Hostage Taking (Barricade Incid...   0.067483  1.069812e+00\n",
       "attacktype1_txt_Hostage Taking (Kidnapping)          0.238952  1.269918e+00\n",
       "attacktype1_txt_Unarmed Assault                     -0.052881  9.484926e-01\n",
       "attacktype1_txt_Unknown                             -0.356583  7.000645e-01\n",
       "targtype1_txt_Airports & Aircraft                   -0.056020  9.455202e-01\n",
       "targtype1_txt_Business                               0.174766  1.190967e+00\n",
       "targtype1_txt_Educational Institution                0.052917  1.054342e+00\n",
       "targtype1_txt_Food or Water Supply                  -0.000661  9.993388e-01\n",
       "targtype1_txt_Government (Diplomatic)               -0.087710  9.160262e-01\n",
       "targtype1_txt_Government (General)                  -0.056876  9.447113e-01\n",
       "targtype1_txt_Journalists & Media                    0.036189  1.036852e+00\n",
       "targtype1_txt_Maritime                              -0.003230  9.967752e-01\n",
       "targtype1_txt_Military                               0.008106  1.008139e+00\n",
       "targtype1_txt_NGO                                    0.036571  1.037248e+00\n",
       "targtype1_txt_Other                                 -0.000292  9.997082e-01\n",
       "targtype1_txt_Police                                 0.113669  1.120382e+00\n",
       "targtype1_txt_Private Citizens & Property            0.247971  1.281422e+00\n",
       "targtype1_txt_Religious Figures/Institutions         0.078823  1.082013e+00\n",
       "targtype1_txt_Telecommunication                      0.035062  1.035684e+00\n",
       "targtype1_txt_Terrorists/Non-State Militia           0.098672  1.103704e+00\n",
       "targtype1_txt_Tourists                               0.010228  1.010280e+00\n",
       "targtype1_txt_Transportation                         0.010450  1.010505e+00\n",
       "targtype1_txt_Unknown                               -0.842708  4.305432e-01\n",
       "targtype1_txt_Utilities                              0.175433  1.191762e+00\n",
       "targtype1_txt_Violent Political Party               -0.011391  9.886739e-01"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To show coefficient and odd_ratio for each variables\n",
    "valuesR = np.append(results.intercept_, results.coef_)\n",
    "\n",
    "namesR = np.append('intercep', df5reg.columns)\n",
    "\n",
    "table = pd.DataFrame( valuesR, index = namesR, columns = ['coef'])\n",
    "table['odd_ratio'] = np.exp(table['coef'])\n",
    "\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we know in Logistic r regression, if the response variable increases by x units then the predictor variable will Increases by b1x times where b1 is the coefficient.  So if the response variables increases by one unit then out predictor variables variables such as attacktype_1 , targettype_1 , etc increases by their respective coefficient amount of times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression using stats model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.formula.api as smf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iyear</th>\n",
       "      <th>success</th>\n",
       "      <th>propvalue</th>\n",
       "      <th>country</th>\n",
       "      <th>crit1</th>\n",
       "      <th>crit2</th>\n",
       "      <th>crit3</th>\n",
       "      <th>nkill</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>22500.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>1970</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>305.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181681</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>160</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181682</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>98</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181685</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181687</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>181688</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>-99.0</td>\n",
       "      <td>160</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>36906 rows Ã— 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        iyear  success  propvalue  country  crit1  crit2  crit3  nkill\n",
       "7        1970        1    22500.0      217      1      1      1    0.0\n",
       "8        1970        1    60000.0      217      1      1      1    0.0\n",
       "10       1970        0        0.0      217      1      1      0    0.0\n",
       "11       1970        1      305.0      217      1      1      1    0.0\n",
       "14       1970        1  2000000.0      217      1      1      1    0.0\n",
       "...       ...      ...        ...      ...    ...    ...    ...    ...\n",
       "181681   2017        1      -99.0      160      1      1      1    1.0\n",
       "181682   2017        1      -99.0       98      1      1      1    0.0\n",
       "181685   2017        1      -99.0        4      1      1      1    0.0\n",
       "181687   2017        1      -99.0      200      1      1      0    2.0\n",
       "181688   2017        1      -99.0      160      1      1      1    0.0\n",
       "\n",
       "[36906 rows x 8 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cleaning the required data\n",
    "dflr = df.filter(['iyear','success','propvalue','country','crit1','crit2','crit3','nkill'], axis=1)\n",
    "dflr=dflr.dropna()\n",
    "dflr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 36906 entries, 7 to 181688\n",
      "Data columns (total 8 columns):\n",
      "iyear        36906 non-null int64\n",
      "success      36906 non-null int64\n",
      "propvalue    36906 non-null float64\n",
      "country      36906 non-null int64\n",
      "crit1        36906 non-null int64\n",
      "crit2        36906 non-null int64\n",
      "crit3        36906 non-null int64\n",
      "nkill        36906 non-null float64\n",
      "dtypes: float64(2), int64(6)\n",
      "memory usage: 2.5 MB\n"
     ]
    }
   ],
   "source": [
    "dflr.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing further what all is required.\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "from patsy import dmatrices\n",
    "import statsmodels.api\n",
    "\n",
    "from sklearn import linear_model\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from scipy import stats\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from warnings import simplefilter\n",
    "simplefilter(action='ignore', category=FutureWarning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.143748\n",
      "         Iterations 17\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                success   No. Observations:                36906\n",
      "Model:                          Logit   Df Residuals:                    36898\n",
      "Method:                           MLE   Df Model:                            7\n",
      "Date:                Thu, 12 Dec 2019   Pseudo R-squ.:                 0.03781\n",
      "Time:                        13:40:55   Log-Likelihood:                -5305.2\n",
      "converged:                       True   LL-Null:                       -5513.6\n",
      "Covariance Type:            nonrobust   LLR p-value:                 5.557e-86\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "Intercept      4.1968      5.740      0.731      0.465      -7.053      15.446\n",
      "iyear         -0.0012      0.003     -0.435      0.663      -0.007       0.004\n",
      "propvalue   3.923e-05    4.9e-06      8.005      0.000    2.96e-05    4.88e-05\n",
      "nkill          0.1492      0.017      9.025      0.000       0.117       0.182\n",
      "country       -0.0004      0.000     -1.258      0.208      -0.001       0.000\n",
      "crit1          0.6586      0.216      3.050      0.002       0.235       1.082\n",
      "crit2          0.9505      0.335      2.838      0.005       0.294       1.607\n",
      "crit3         -0.2702      0.111     -2.442      0.015      -0.487      -0.053\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "\n",
    "model = smf.logit('success ~ iyear + propvalue + nkill+country+crit1+crit2+crit3', data = dflr).fit()\n",
    "\n",
    "print(model.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept    66.473844\n",
       "iyear         0.998763\n",
       "propvalue     1.000039\n",
       "nkill         1.160914\n",
       "country       0.999648\n",
       "crit1         1.932022\n",
       "crit2         2.586992\n",
       "crit3         0.763264\n",
       "dtype: float64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "odds_ratio = np.exp(model.params)\n",
    "\n",
    "odds_ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iyear</th>\n",
       "      <th>success</th>\n",
       "      <th>propvalue</th>\n",
       "      <th>country</th>\n",
       "      <th>crit1</th>\n",
       "      <th>crit2</th>\n",
       "      <th>crit3</th>\n",
       "      <th>nkill</th>\n",
       "      <th>crit1*iyear</th>\n",
       "      <th>crit1*crit2*crit3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>22500.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>60000.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>1970</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1970</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>305.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>217</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    iyear  success  propvalue  country  crit1  crit2  crit3  nkill  \\\n",
       "7    1970        1    22500.0      217      1      1      1    0.0   \n",
       "8    1970        1    60000.0      217      1      1      1    0.0   \n",
       "10   1970        0        0.0      217      1      1      0    0.0   \n",
       "11   1970        1      305.0      217      1      1      1    0.0   \n",
       "14   1970        1  2000000.0      217      1      1      1    0.0   \n",
       "\n",
       "    crit1*iyear  crit1*crit2*crit3  \n",
       "7          1970                  1  \n",
       "8          1970                  1  \n",
       "10         1970                  0  \n",
       "11         1970                  1  \n",
       "14         1970                  1  "
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#adding interacting variables,\n",
    "dflr['crit1*iyear'] = dflr.crit1*dflr.iyear\n",
    "dflr['crit1*crit2*crit3'] = dflr.crit1*dflr.crit2*dflr.crit3\n",
    "\n",
    "dflr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Anova\n",
    "def anova_deviance_table(*models):\n",
    "    return pd.DataFrame({\n",
    "        'df_residuals': [i.df_resid for i in models],\n",
    "        'resid_stddev': [i.deviance for i in models],\n",
    "        'df': [i.df_model for i in models],\n",
    "        'deviance': [i.deviance for i in models]\n",
    "    })\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:8: DeprecationWarning: Calling Family(..) with a link class as argument is deprecated.\n",
      "Use an instance of a link class instead.\n",
      "  \n",
      "//miniconda3/lib/python3.7/site-packages/statsmodels/genmod/families/family.py:890: RuntimeWarning: divide by zero encountered in true_divide\n",
      "  n_endog_mu = self._clean((1. - endog) / (1. - mu))\n",
      "//miniconda3/lib/python3.7/site-packages/statsmodels/genmod/families/family.py:890: RuntimeWarning: invalid value encountered in true_divide\n",
      "  n_endog_mu = self._clean((1. - endog) / (1. - mu))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   df_residuals  resid_stddev  df  deviance\n",
      "0         36898           NaN   7       NaN\n",
      "1         36898           NaN   7       NaN\n",
      "2         36899           NaN   6       NaN\n",
      "3         36898           NaN   7       NaN\n",
      "4         36899           NaN   6       NaN\n"
     ]
    }
   ],
   "source": [
    "# creating and fitting different logistic regression models using GLM\n",
    "m1 = 'success ~ nkill + iyear + propvalue + country + crit1 + crit3+crit1*iyear'\n",
    "m2 = 'success ~ nkill + iyear + crit1*iyear + country + crit1 + crit2+crit1*crit2*crit3'\n",
    "m3 = 'success ~ nkill + iyear + propvalue + country + crit2 + crit3'\n",
    "m4 = 'success ~ nkill + iyear + propvalue + crit1 + crit2 + crit3+crit1*iyear+crit1*crit2*crit3'\n",
    "m5 = 'success ~ nkill + propvalue + country + crit1 + crit2 + crit3+crit1*crit2*crit3'\n",
    "\n",
    "logistic = statsmodels.genmod.families.family.Binomial(link=statsmodels.genmod.families.links.logit)\n",
    "\n",
    "glmm1 = smf.glm(m1, data=dflr, family=logistic).fit()\n",
    "glmm2 = smf.glm(m2, data=dflr, family=logistic).fit()\n",
    "glmm3 = smf.glm(m3, data=dflr, family=logistic).fit()\n",
    "glmm4 = smf.glm(m4, data=dflr, family=logistic).fit()\n",
    "glmm5 = smf.glm(m5, data=dflr, family=logistic).fit()\n",
    "\n",
    "\n",
    "print(anova_deviance_table(glmm1,glmm2,glmm3,glmm4,glmm5))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0    0.965697\n",
       "1    0.965697\n",
       "2    0.965697\n",
       "3    0.965697\n",
       "4    0.965697\n",
       "dtype: float64"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "#creating predictor and response matrices\n",
    "y1,X1 = dmatrices('success ~ nkill + iyear + propvalue + country + crit1 + crit3+crit1*iyear',dflr)\n",
    "y2,X2 = dmatrices('success ~ nkill + iyear + crit1*iyear + country + crit1 + crit2+crit1*crit2*crit3',dflr)\n",
    "y3,X3 = dmatrices('success ~ nkill + iyear + propvalue + country + crit2 + crit3',dflr)\n",
    "y4,X4 = dmatrices('success ~ nkill + iyear + propvalue + crit1 + crit2 + crit3+crit1*iyear+crit1*crit2*crit3',dflr)\n",
    "y5,X5 = dmatrices('success ~ nkill + propvalue + country + crit1 + crit2 + crit3+crit1*crit2*crit3',dflr)\n",
    "\n",
    "#fitting the model\n",
    "lr = linear_model.LogisticRegression()\n",
    "\n",
    "s1 = cross_val_score(lr, X1, y1, cv=5)\n",
    "s2 = cross_val_score(lr, X2, y2, cv=5)\n",
    "s3 = cross_val_score(lr, X3, y3, cv=5)\n",
    "s4 = cross_val_score(lr, X4, y4, cv=5)\n",
    "s5 = cross_val_score(lr, X5, y5, cv=5)\n",
    "\n",
    "scores_df = pd.DataFrame([s1,s2,s3,s4,s5])\n",
    "\n",
    "scores_df.apply(np.mean,axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All the models here are showing an efficiency of 0.965697, still we will try to see how the models can be improved for further improvement using regularisation.\n",
    "\n",
    "### Regularisation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "response, predictors = dmatrices('success ~ iyear + propvalue + nkill+country+crit1+crit2+crit3+ crit1*crit2*crit3',\n",
    "                                 data = dflr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "//miniconda3/lib/python3.7/site-packages/sklearn/utils/validation.py:744: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(predictors,response,random_state=0)\n",
    "\n",
    "lr = linear_model.LogisticRegression()\n",
    "\n",
    "logmodel = lr.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we will check accuracy of trained & tested dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9654250514830738\n"
     ]
    }
   ],
   "source": [
    "#Accuracy of training dataset\n",
    "print(lr.score(X_train,y_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9665113254578953\n"
     ]
    }
   ],
   "source": [
    "#Accuracy of testing dataset\n",
    "\n",
    "print(lr.score(X_test,y_test))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that after performing the regularisation using logistic regression model, the accuracy has increased from training to test dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
